
  import React,{useEffect} from 'react';
 
  import 'highlight.js/styles/xcode.css';
  const hljs = require('highlight.js');

  export default () => {
    useEffect(()=>{
      document.querySelectorAll('code').forEach(el => {
        el.style.backgroundColor='#f8f8f8';
        el.style.marginBottom='0.1rem';
        hljs.highlightElement(el);
      });
    },[])
    return <div style={{fontSize:'0.26rem'}} dangerouslySetInnerHTML={{__html:"<h3>数组</h3>\n<ul>\n<li>手写数组去重(deduplicate)的方法（支持多维数组）</li>\n</ul>\n<pre><code class=\"language-js\">// 去重\nconst deduplicate = (arr)=>{\n  return [...new Set(arr)];\n}\n</code></pre>\n<ul>\n<li>\n<p>写一个方法判断数组内元素是否全部相同</p>\n</li>\n<li>\n<p>写一个方法，判断给定的几个数字是否相等，如[1,1,1,1]相等</p>\n</li>\n<li>\n<p>写一个方法判断一组数字是连值</p>\n</li>\n<li>\n<p>使用js实现一个数组flat()的方法</p>\n</li>\n<li>\n<p>写一个方法从数组中随机抽取N个不重复的元素</p>\n</li>\n<li>\n<p>写一个方法找出指定一维数组所有不重复的元素和个数</p>\n</li>\n<li>\n<p>写一个方法，传入数字x，从一个一维数组里找到两个数字符合“n1 + n2 ＝ x”</p>\n</li>\n<li>\n<p>从一个无序的整数数组中，找出最小和最大数之间缺失的数字，要求最小的时间复杂度</p>\n</li>\n<li>\n<p>分别写一个方法实现基数排序、桶排序、归并排序、插入排序、交换排序、选择排序，并解释下时间复杂度和空间复杂度</p>\n</li>\n<li>\n<p>手写数组的map、filter、find方法</p>\n</li>\n</ul>\n<pre><code class=\"language-js\">Array.prototype.myMap = function (callback) {\n  const arr = []\n  for (let i = 0; i < this.length; i++) {\n    arr[i] = callback(this[i], i);\n  }\n  return arr;\n}\n\nArray.prototype.myFilter = function (callback) {\n  const arr = [];\n  for (let i = 0; i < this.length; i++) {\n    if (callback(this[i], i)) {\n      arr.push(this[i]);\n    }\n  }\n  return arr;\n}\n\nArray.prototype.myFind = function (callback) {\n  for (let i = 0; i < this.length; i++) {\n    if (callback(this[i], i)) {\n      return this[i];\n    }\n  }\n}\n\n// 测试\nconst arr = [1, 2, 3, 4, 9, 5];\nconst mapArr = arr.myMap((item, index) => item + index);\nconsole.log(mapArr);\n\nconst filterArr = arr.myFilter((item, index) => item > index);\nconsole.log(filterArr);\n\nconst findArr = arr.myFind((item, index) => item === index);\nconsole.log(findArr)\n</code></pre>\n<ul>\n<li>写一个洗扑克牌的方法</li>\n<li>写一个方法把多维数组降维</li>\n<li>写个方法近似计算指定数组或对象占用内存的大小</li>\n<li>写个方法判断数组对象中是否存在某个对象</li>\n<li>使用js生成1-10000的数组</li>\n<li>写一个方法获取指定数组中间的值（一个或者两个）</li>\n<li>数组元素全倒排列并去重</li>\n<li>使用js写个方法，把下列数组对象按多字段排序，name升序，age降序</li>\n<li>使用js写个方法，使得数组的两个元素互换，要求高性能</li>\n<li>使用js写一个方法，使得数组的某个元素置顶</li>\n<li>写一个方法检测指定的数组是否有重复的元素</li>\n<li>写一个方法，批量删除指定索引的数组元素</li>\n<li>写一个方法js将数组对象中某个属性值相同的对象合并成一个新对象</li>\n<li>写一个方法将一个数组中的元素，从前到后依次两两组合，最后一个与第一个组合</li>\n<li>写一个算法找到数组中两个元素相加等于指定数的所有组合</li>\n<li>写一个方法判断在一个一维数组里，有且只有一个数等于给定的值</li>\n<li>请通过reduce函数实现一维数组的求和</li>\n</ul>\n<pre><code class=\"language-js\">function sum (arr) {\n  return arr.reduce((val, cur) => val + cur);\n}\n\nconsole.log(sum([1, 5, 4, 3, 2]));\n</code></pre>\n<ul>\n<li>写一个方法找到一维数组里，有且只有两个连续相等的所有元素</li>\n<li>写一个方法，让数组里的元素上移一格/下移一格</li>\n<li>分别写出数组的交集、并集、差集、补集这四个方法</li>\n<li>写个方法随机打乱一个数组</li>\n</ul>\n<pre><code class=\"language-js\">function getOutOfOrder (arr) {\n  const len = arr.length;\n  const indexMap = {};\n  const ans = [];\n  let index = 0;\n  while (true) {\n    index = Math.floor(Math.random() * len);\n    if (!indexMap[index]) {\n      indexMap[index] = true\n      ans.push(arr[index]);\n    }\n    if (ans.length === len) break;\n  }\n  return ans;\n}\n//测试\nconst arr = [1, 2, 3, 4, 5]\nconsole.log(getOutOfOrder(arr));\n</code></pre>\n<ul>\n<li>请实现一个flattenDeep函数，把多维数组扁平化</li>\n<li>写一个函数找出给定数组中的最大差值</li>\n<li>写一个获取数组的最大值、最小值的方法</li>\n</ul>\n<pre><code class=\"language-js\">// 方法一\nfunction getMaximum (intArr) {\n  const min = Math.min.apply(null, intArr);\n  const max = Math.max.apply(null, intArr);\n  return { min, max }\n}\n// 方法二\nfunction getMaximum (intArr) {\n  if (!intArr || intArr.length < 1) return false;\n  intArr = intArr.sort((a, b) => a - b);\n  return {\n    min: intArr[0],\n    max: intArr[intArr.length - 1]\n  }\n}\n// 测试\nconst arr = [1, 3, 4, 6, 8, 1, 3, 6, 99]\nconsole.log(getMaximum(arr))\n</code></pre>\n<ul>\n<li>如何快速让一个数组乱序，写出来</li>\n</ul>\n<pre><code class=\"language-js\">function getOutOrderArr (arr) {\n  const len = arr.length;\n  const map = {};\n  const ans = [];\n  while (ans.length < len) {\n    const key = Math.floor(Math.random() * len);\n    if (!map[key]) {\n      map[key] = true;\n      ans.push(arr[key]);\n    }\n  }\n  return ans;\n}\n// 测试\nconst arr = [1, 2, 2, 4, 5]\nconsole.log(getOutOrderArr(arr));\n</code></pre>\n<ul>\n<li>写一个数组去重的方法（支持多维数组）</li>\n<li>分别对以下数组进行去重，1:[1,'1',2,'2',3]，2:[1,[1,2,3['1','2','3'],4],5,6]</li>\n<li>用递归算法实现，数组长度为5且元素的随机数在2-32间不重复的值</li>\n</ul>\n"}}></div>
  }
  