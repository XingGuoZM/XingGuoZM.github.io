
  import React,{useEffect} from 'react';
 
  import 'highlight.js/styles/xcode.css';
  const hljs = require('highlight.js');

  export default () => {
    useEffect(()=>{
      document.querySelectorAll('code').forEach(el => {
        el.style.backgroundColor='#f8f8f8';
        el.style.marginBottom='0.1rem';
        hljs.highlightElement(el);
      });
    },[])
    return <div style={{fontSize:'0.26rem'}} dangerouslySetInnerHTML={{__html:"<h2>字符串</h2>\n<ul>\n<li>写一个函数，去除字符串中的空格</li>\n</ul>\n<pre><code class=\"language-js\">const replaceEmpty = (str) => {\n  return str.replace(/\\s/g, '');\n}\n</code></pre>\n<ul>\n<li>写一个函数，在给定一个url字符串获取参数的方法</li>\n</ul>\n<pre><code class=\"language-js\">const getUrlParams = (str) => {\n\n  const paramArr = str.split('?')[1].split('&amp;');\n  const obj = {};\n  for (const item of paramArr) {\n    const arr = item.split('=');\n    if (!arr[1]) {\n      obj[arr[0]] = true;\n    } else {\n      obj[arr[0]] = arr[1];\n    }\n  }\n  return obj;\n}\n\nconsole.log(getUrlParams('https://baidu.com?a=1&amp;b=undefined&amp;c'))\n</code></pre>\n<ul>\n<li>写一个函数，判断是否回文</li>\n</ul>\n<pre><code class=\"language-js\">const isPalindrome = (str) => {\n  let left = 0, right = str.length - 1;\n  while (left < right) {\n    if (str[left++] === str[right--]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconsole.log(isPalindrome('abd ba'))\n</code></pre>\n<ul>\n<li>给定一个字符串 s，最多删除一个字符。判断是否能成为回文字符串。 例如输入“aba”，输出“True”；输入“abca”,输出“True”</li>\n</ul>\n<pre><code class=\"language-js\">const check = (str, left, right) => {\n  while (left < right) {\n    if (str[left++] !== str[right--]) return false;\n  }\n  return true;\n}\n\nconst isPalindromeBydel1 = (s) => {\n  let left = 0;\n  let right = s.length - 1;\n  while (left < right) {\n    if (s[left] != s[right]) {\n      return check(s, left, right - 1) || check(s, left + 1, right);\n    } else {\n      ++left;\n      --right;\n    }\n  }\n  return true;\n}\n\nconsole.log(isPalindromeBydel1('abca'))\n</code></pre>\n<ul>\n<li>写一个函数，实现字符串的反转</li>\n</ul>\n<pre><code class=\"language-js\">// 方法一\nconst strReverse1 = (str) => {\n  return str.split('').reverse().join('');\n}\n// 方法二\nconst strReverse2 = (str) => {\n  let result = '';\n\n  for (let i = str.length - 1; i >= 0; i--) {\n    result += str[i];\n  }\n  return result;\n}\n</code></pre>\n<ul>\n<li>写一个函数，实现两个大数相加</li>\n</ul>\n<pre><code class=\"language-js\">const sum = (a, b) => {\n  const len = Math.max(a.length, b.length);\n  a = a.padStart(len, '0')\n  b = b.padStart(len, '0')\n  let curry = 0;\n  let result = ''\n  for (let i = len - 1; i >= 0; i--) {\n    const sum = +a[i] + +b[i] + curry;\n\n    result = sum % 9 + result;\n    curry = Math.floor(sum / 9);\n  }\n  return curry ? curry + result : result;\n}\n//测试\nconsole.log(sum('123456789099888','111111111111111111111111111111111111'));\n</code></pre>\n<ul>\n<li>写一个函数，判断一个字符串是否为另一个字符串的子串</li>\n</ul>\n<pre><code class=\"language-js\">// 方式一\nconst isSubStr1 = (str1, str2) => {\n  const longStr = str1.length > str2.length ? str1 : str2;\n  const shortStr = str1.length < str2.length ? str1 : str2;\n\n  return longStr.indexOf(shortStr) > -1 ? true : false;\n}\n// 方式二\nconst isSubStr2 = (str1, str2) => {\n  const longStr = str1.length > str2.length ? str1 : str2;\n  const shortStr = str1.length < str2.length ? str1 : str2;\n\n  for (let i = 0; i < longStr.length - shortStr.length; i++) {\n    const s = longStr.slice(i, shortStr.length);\n    if (s === shortStr) {\n      return true;\n    }\n  }\n  return false;\n}\n// 方式三\nconst isSubStr3 = (str1, str2) => {\n  return str1.includes(str2) || str2.includes(str1);\n}\n</code></pre>\n<ul>\n<li>写一个格式化金额的方法</li>\n<li>将 153812.7 转化为 153,812.7</li>\n<li>实现格式化输出，比如输入 999999999，输出 999,999,999</li>\n<li>写一个函数，实现字符串数字的格式化，例如100000->100,000</li>\n</ul>\n<pre><code class=\"language-js\">// 方式一：正则\nconst formatNumStr = (numStr) => {\n  return numStr.replace(/(?=\\B(\\d{3})+$)/g, ',')\n}\n\nconsole.log(formatNumStr('100000000'))\n</code></pre>\n<ul>\n<li>写一个函数，实现颜色转换 'rgb(255, 255, 255)' -> '#FFFFFF' 的多种思路</li>\n</ul>\n<pre><code class=\"language-js\">const rgb2hex=(rgb)=>{\n  const rgbList = rgb.match(/\\d+/g);\n  const hex = (n) => {\n    return (&quot;0&quot; + Number(n).toString(16)).slice(-2);\n  }\n  return rgbList.reduce((pre,cur)=>pre+hex(cur),'#').toUpperCase()\n}\n\n//测试\nconsole.log(rgb2hex('rgb(255,255,255)'));\n</code></pre>\n<ul>\n<li>写一个函数，实现颜色转换 '#FFFFFF' -> 'rgb(255, 255, 255)' 的多种思路</li>\n</ul>\n<pre><code class=\"language-js\">const hex2rgb=(hex)=>{\n  const ret = [];\n  for(let i = 1; i < hex.length; i+=2) {\n    const str = `0x${String(hex[i])}${String(hex[i+1])}`;\n    ret.push(parseInt(str));\n  }\n  return `rgb(${ret.join(',')})`;\n}\n//测试\nconsole.log(hex2rgb('#000000'));\n</code></pre>\n<ul>\n<li>实现normalize函数，能将输入的特定的字符串转化为特定的结构化数据，字符串仅由小写字母和 [] 组成，且字符串不会包含多余的空格。示例一: 'abc' --> {value: 'abc'}。示例二：'[abc[bcd[def]]]' --> {value: 'abc',children: {value: 'bcd', children: {value: 'def'}}}</li>\n</ul>\n<pre><code class=\"language-js\">function normalize (str) {\n  let treeObj = {};\n  str.split(/[\\[\\]]/g).filter(Boolean).reduce((object, curr, index, a) => {\n    object.value = curr;\n    if (index !== a.length - 1) {\n      return object.children = {}\n    }\n  }, treeObj);\n  return treeObj;\n}\n// 测试\nconsole.log(normalize('[abc[bcd[def]]]'));\n</code></pre>\n<ul>\n<li>写一个方法，将字符串中的单词倒转后输出，如：<code>my love</code> -> <code>ym evol</code></li>\n</ul>\n<pre><code class=\"language-js\">const reverseWords = (str) => {\n  return str.split(' ').map(item => {\n    return item.split('').reverse().join('')\n  }).join(' ');;\n}\n// 测试\nconst str = 'my love';\nconsole.log(reverseWords(str));\n</code></pre>\n<ul>\n<li>写个方法，找出指定字符串中重复最多的字符及其长度</li>\n</ul>\n<pre><code class=\"language-js\">function getMaxChar (str) {\n  const obj = {}\n  for (let i = 0; i < str.length; i++) {\n    if (obj[str[i]]) {\n      obj[str[i]] += 1\n    } else {\n      obj[str[i]] = 1;\n    }\n  }\n  let maxChar = [], maxCount = -1\n  for (let char in obj) {\n    if (!obj.hasOwnProperty(char)) {\n      continue;\n    }\n    if (obj[char] === maxCount) {\n      maxChar.push(char);\n    } else if (obj[char] > maxCount) {\n      maxChar = [char];\n      maxCount = obj[char];\n    }\n  }\n  return { maxChar, maxCount };\n}\n// 测试\nconst str = 'abbc';\nconst { maxChar, maxCount } = getMaxChar(str);\nconsole.log(maxChar, maxCount);\n</code></pre>\n<ul>\n<li>写一个字符串重复的repeat函数，例如repeat('abc',4) // abcabcabcabc</li>\n</ul>\n<pre><code class=\"language-js\">// 方法一：new Array + join\nconst repeat = (str, count) => {\n  return (new Array(count + 1)).join(str)\n}\n//方法二:递归\nconst repeat = (str, count) => {\n  return count > 0 ? str.concat(repeat(str, --count)) : ''\n}\n// 方法三：循环\n\n//测试\nconst str = 'abc';\nconst count = 5;\nconsole.log(repeat(str, count))\n</code></pre>\n<ul>\n<li>请写出一个函数求出N的阶乘（即N!）</li>\n</ul>\n<pre><code class=\"language-js\">// 递归\nfunction factorialByRecursion (n) {\n  if (n === 1) return n;\n  return n * factorial(n - 1)\n}\n//循环\nfunction factorialByLoop (n) {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum *= i;\n  }\n  return sum;\n}\n// 测试\nconsole.log(factorialByLoop(10))\n</code></pre>\n<ul>\n<li>找到字符串中最长的单词，并返回它的长度</li>\n</ul>\n<pre><code class=\"language-js\">function getMaxStr (str) {\n  const arr = str.split(' ');\n  return arr.map(item => item.length).reduce((val, cur) => val > cur ? val : cur);\n}\n\nconst str = 'my name is jason'\nconsole.log(getMaxStr(str));\n</code></pre>\n<ul>\n<li>写一个方法把下划线命名转成大驼峰命名</li>\n<li>写一个方法把中划线命名转换成小驼峰命名</li>\n<li>写一个方法把小驼峰命名转换成中划线命名</li>\n</ul>\n<pre><code class=\"language-js\">// 命名方式中划线改小驼峰\nconst format2Camel = function (str) {\n  return str.replace(/-[a-zA-Z]/g, match => match.replace('-', '').toUpperCase())\n}\n// 命名方式小驼峰改中划线\nconst format2Line = function (str) {\n  return str.replace(/[A-Z]/g, match => '-' + match.toLowerCase());\n}\n\nconst str = 'elButtonList';\nconst ans = format2Line(str);\nconsole.log(ans);\n</code></pre>\n<ul>\n<li>写一个方法把0和1互转（0置1，1置0）</li>\n</ul>\n<pre><code class=\"language-js\">const convert = num=>num^1;\n</code></pre>\n<ul>\n<li>写一个方法验证是否为中文</li>\n</ul>\n<pre><code class=\"language-js\">const isContainChinese = (str) => /[\\u4e00-\\u9FFF]/g.test(str)\n</code></pre>\n<ul>\n<li>写一个验证身份证号的方法</li>\n</ul>\n<pre><code class=\"language-js\">const isValidIdCard = str =>/^[1-9]\\d{5}(18|19|20)\\d{2}((0[1-9])|(1[0-2]))(([0-2][1-9])|10|20|30|31)\\d{3}[0-9Xx]$/g.test(str)\n</code></pre>\n<ul>\n<li>输入一个四则混合运算的表达式，请写个方法求它的值</li>\n<li>分别封装精确运算的加减乘除四个方法</li>\n</ul>\n<pre><code class=\"language-js\">// 分别封装精确运算的加减乘除四个方法\n\nString.prototype.numberAdd = function (number) {\n\n  const Max = Math.max(this.length, number.length);\n  let curry = 0;\n  let n1 = this.padStart(Max, '0');\n  let n2 = number.padStart(Max, '0');\n  let sum = '';\n  for (let i = Max - 1; i >= 0; i--) {\n    const temp = Number(n1[i]) + Number(n2[i]) + curry;\n    sum = temp % 10 + sum;\n    curry = temp > 9 ? 1 : 0;\n  }\n  return curry === 1 ? '1' + sum : sum;\n}\nString.prototype.numberMinus = function (number) {\n  const Max = Math.max(this.length, number.length);\n  let curry = 0;\n\n  let flag = true;\n  let n1 = this.padStart(Max, '0');\n  let n2 = number.padStart(Max, '0');\n  if (Number(this) <= (number)) {\n    n1 = number.padStart(Max, '0');\n    n2 = this.padStart(Max, '0');\n    flag = false;\n  }\n  let ans = ''\n  for (let i = Max - 1; i >= 0; i--) {\n    let num1 = Number(n1[i]), num2 = Number(n2[i])\n    curry === 1 &amp;&amp; num1--;\n    curry = num1 < num2 ? 1 : 0;\n    const temp = num1 + 10 * curry - num2;\n\n    ans = temp + ans;\n  }\n  return flag ? ans : `-${Number(ans)}`;\n}\nString.prototype.numberMultiply = function (number) {\n  const n1 = Number(this);\n  const n2 = Number(number);\n  const min = n1 < n2 ? n1 : n2;\n  const max = n1 < n2 ? number : this;\n  let sum = '';\n  for (let i = 0; i < min; i++) {\n    sum = sum.numberAdd(max)\n  }\n  return sum;\n}\nString.prototype.numberDivide = function (number) {\n  let t1 = 0\n  let t2 = 0\n  let r1\n  let r2\n  try {\n    t1 = this.split('.')[1].length\n    t2 = number.split('.')[1].length\n  } catch (e) { }\n  r1 = Number(this.replace('.', ''))\n  r2 = Number(number.replace('.', ''))\n  return (r1 / r2) * Math.pow(10, t2 - t1)\n}\n\nconsole.log('2'.numberDivide('3'));\n</code></pre>\n<ul>\n<li>随机生成一个指定长度的验证码</li>\n<li>写一个方法生成不重复的用户ID</li>\n<li>写一个方法随机生成指定位数的字符串</li>\n</ul>\n<pre><code class=\"language-js\">const generateStr = (n) => {\n  let str = Math.random().toString(36).substr(2);\n  return str.length >= n ? str.substr(0, n) : str + generateStr(n - str.length);\n}\n\nconsole.log(generateStr(15));\n</code></pre>\n<ul>\n<li>去除字符串中最后一个指定的字符</li>\n</ul>\n<pre><code class=\"language-js\">\nfunction delLast(str,target) {\n  let reg =new RegExp(`${target}(?=([^${target}]*)$)`)\n  return str.replace(reg,'')\n}\n</code></pre>\n<ul>\n<li>写一个方法检测页面中的所有标签是否正确闭合</li>\n</ul>\n<pre><code class=\"language-js\">const areAllTagsClosed = html => {\n\tconst template = document.createElement('template');\n\ttemplate.innerHTML = html;\n\treturn template.innerHTML === html;\n}\n</code></pre>\n<ul>\n<li>写一个加密（解密）字符串的方法</li>\n</ul>\n<pre><code class=\"language-js\">//加密\nfunction encryptStr (str, key) {\n  let ans = '', b, b1, b2, b3;\n  const len = key.length;\n  for (let i = 0; i < str.length; i++) {\n    b = str.charCodeAt(i);\n    b1 = b % len;\n    b = (b - b1) / len;\n    b2 = b % len;\n    b = (b - b2) / len;\n    b3 = b % len;\n    ans += key[b1] + key[b2] + key[b3];\n  }\n  return ans;\n}\n// 解密\nfunction decryptStr (str, key) {\n  const keyLen = key.length;\n  const ansLen = Math.floor(str.length / 3);\n  let ans = new Array(ansLen), b1, b2, b3, d = 0;\n  for (let i = 0; i < ansLen; i++) {\n    b1 = key.indexOf(str.charAt(d++));\n    b2 = key.indexOf(str.charAt(d++));\n    b3 = key.indexOf(str.charAt(d++));\n    ans[i] = b1 + b2 * keyLen + b3 * keyLen * keyLen;\n  }\n  return String.fromCharCode(...ans);\n}\nconst key = &quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;\nconst str = '¥'\nconst s1 = encryptStr(str, key)\nconst s2 = decryptStr(s1, key)\n\nconsole.log(s1, s2)\n</code></pre>\n<ul>\n<li>统计某一字符或字符串在另一个字符串中出现的次数</li>\n</ul>\n<pre><code class=\"language-js\">const getStrCount = (str, target) => str.match(new RegExp(target, 'g')).length;\n\nconsole.log(getStrCount('abcabc', 'ab'))\n</code></pre>\n<ul>\n<li>写一个去除制表符和换行符的方法</li>\n</ul>\n<pre><code class=\"language-js\">const deTab = (str) => str.replace(/[\\t\\r\\f\\n]*/g, '')\nconsole.log(deTab(\n  `abc\n\n`))\n\n</code></pre>\n<ul>\n<li>写一个把字符串大小写切换的方法</li>\n</ul>\n<pre><code class=\"language-js\">\nfunction isUpperCase (char) {\n  return str.charCodeAt(i) >= 65 &amp;&amp; str.charCodeAt(i) <= 90\n}\nfunction changeCharCode (str) {\n  let ans = ''\n  for (let i = 0; i < str.length; i++) {\n    ans += isUpperCase(str[i]) ? str[i].toLowerCase() : str[i].toUpperCase();\n  }\n  return ans;\n}\n\nconsole.log(changeCharCode('abcARF'));\n</code></pre>\n<ul>\n<li>如何识别出字符串中的回车\\n并进行换行？</li>\n</ul>\n<pre><code class=\"language-js\">const replaceReturn = (str) =>str.replace(/\\n/g, '<br/>');\n</code></pre>\n<ul>\n<li>计算给定的字符串所占的字节数</li>\n</ul>\n<pre><code class=\"language-js\">const isSingleByte = (char) => /^[\\u0000-\\u00ff]$/.test(char)\nfunction getStrBytes (str) {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    isSingleByte(str[i]) ? count++ : count += 2;\n  }\n  return count;\n}\n\nconsole.log(getStrBytes('hello 中国'))\n</code></pre>\n<ul>\n<li>写个方法找出页面中除了数字和英文字母外的所有特殊特号</li>\n</ul>\n<pre><code class=\"language-js\">function getSpecialChar (str) {\n  return str.replace(/[A-Za-z0-9]/g, '')\n}\n</code></pre>\n<ul>\n<li>写一个方法，当给定数字位数不足8位时，则在左边补充0以补足8位数的方法</li>\n</ul>\n<pre><code class=\"language-js\">function padStartby0 (num, str) {\n  if (num < str.length) return str;\n  return new Array(num - str.length).fill(0).join('') + str;\n}\n\nconsole.log(padStartby0(2, '123'))\n</code></pre>\n<ul>\n<li>写一个方法将字符串中的制表符全部替换为逗号</li>\n</ul>\n<pre><code class=\"language-js\">function replaceTab2Comma (str) {\n  return str.replace(/\\u0020/g, ',')\n}\n\nconsole.log(replaceTab2Comma('abcd  dfed'))\n</code></pre>\n<ul>\n<li>写一个使两个整数进行交换的方法（不能使用临时变量）</li>\n</ul>\n<pre><code class=\"language-js\">let a =1,b=13\na ^= b;\nb ^= a;\na ^= b;\n</code></pre>\n<ul>\n<li>给定特定的字符串，写个方法判断是否以元音字母结尾</li>\n</ul>\n<pre><code class=\"language-js\">function isEndWithVowel (str) {\n  return /[a,e,i,o,u]$/i.test(str)\n}\n\nconsole.log(isEndWithVowel('hellU'))\n</code></pre>\n<ul>\n<li>写一个方法找出一段话里面出现频率最多的词</li>\n</ul>\n<pre><code class=\"language-js\">\nfunction getHighestRateWord (texts) {\n  const arr = (',' + texts).split(/\\W+/)\n  let words = '';\n  let count = -1;\n  const map = {};\n  for (let item of arr) {\n    item = item.toLowerCase();\n    map[item] = (map[item] || 0) + 1;\n    if (count < map[item]) {\n      words = item;\n      count = map[item]\n    }\n  }\n  return { words, count }\n}\nconst str = 'I have a pen, I have an apple, Uh! apple pen. Pen pineapple apple pen.'\n\nconsole.log(getHighestRateWord(str))\n</code></pre>\n<ul>\n<li>阿拉伯数字和中文数字的互转的方法,例如：101转成一百零一、一百零一转成101</li>\n</ul>\n<pre><code class=\"language-js\">// 来源：https://juejin.cn/post/6892372242143903758\nfunction NumberConvert () {\n  this.NumberMap = '零一二三四五六七八九';\n  this.UnitMap = {\n    '十': 10,\n    '百': 100,\n    '千': 1000,\n    '万': 10000,\n    '亿': 100000000\n  }\n  this.ChinaUnit = [''\n    , '十', '百', '千', '万'\n    , '十', '百', '千', '亿'\n    , '十', '百', '千', '万'\n    , '十', '百', '千', '亿'\n  ];\n  // \n  this.arabic2China = function (num) {\n    if (!num || isNaN(num)) {\n      return &quot;零&quot;;\n    }\n    const str = String(num);\n    const len = str.length;\n    let result = &quot;&quot;;\n    for (let i = 0; i < len; i++) {\n      // 反向映射数字\n      const number = this.NumberMap[str[len - 1 - i]];\n      // 正向映射单位\n      const unit = this.ChinaUnit[i];\n      result = number + unit + result;\n    }\n    return result\n      .replace(/零(千|百|十)/g, '零')\n      .replace(/十零/g, '十')\n      .replace(/零+/g, '零')\n      .replace(/零亿/g, '亿')\n      .replace(/零万/g, '万')\n      .replace(/亿万/g, '亿')\n      .replace(/零+$/, '')\n      .replace(/^一十/g, '十');\n  }\n  this._transform = function (str) {\n    if (!str) return 0;\n    const stack = [];\n    for (let i = 0; i < str.length; i++) {\n      const n = this.NumberMap.indexOf(str[i]);\n      const u = this.UnitMap[str[i]];\n      if (n >= 0) stack.push(n)\n      if (u >= 0) stack.push((stack.pop()) * u)\n    }\n    return stack.reduce((acc, item) => acc + item, 0);\n  }\n  this._format = function (str) {\n    return str[0] === '十' ? `一${str}` : str\n  };\n  this.china2Arabic = function (str) {\n    const splitChar = ['亿', '万'];\n    let s = str;\n    for (const char of splitChar) {\n      const arr = s.split(char);\n      if (arr.length === 2) {\n        return this._transform(this._format(arr[0])) * this.UnitMap[char] + this.china2Arabic(arr[1]);\n      }\n      s = arr[0];\n    }\n    return this._transform(this._format(s));\n  }\n}\n\n\nconst convert = new NumberConvert();\nconst s = convert.arabic2China(8)\nconst n = convert.china2Arabic(s);\nconsole.log(s, n)\n</code></pre>\n<ul>\n<li>写一个汉字与Unicode码的互转的方法</li>\n</ul>\n<pre><code class=\"language-js\">// 汉字 -> unicode编码\nfunction str2Unicode (str) {\n  let result = ''\n  for (let i = 0; i < str.length; i++) {\n\n    result += `&amp;#${str.charCodeAt(i)};`;\n  }\n  return result;\n}\n// unicode编码串 -> 汉字\nfunction unicode2Str (unicode) {\n  const code = unicode.match(/&amp;#(\\d+);/g);\n  let result = '';\n  for (let i = 0; i < code.length; i++) {\n    result += String.fromCharCode(code[i].replace(/[&amp;#;]/g, ''))\n  }\n  return result;\n}\n</code></pre>\n<ul>\n<li>写一个密码生成器，并同时写一个密码强度校验的方法</li>\n</ul>\n<pre><code class=\"language-js\">function checkStrength (password) {\n  const regArr = [\n    /[a-z]/g,// 小写\n    /[A-Z]/g, // 大写\n    /[0-9]/g,// 数字\n    /[!@#$%^&amp;*()_+=<>?:{}]/g // 特殊字符\n  ]\n  let level = 0;\n  for (const reg of regArr) {\n    if (reg.test(password)) {\n      level++\n    }\n  }\n  return level;\n}\n\n// 在[start,end]区间内生成一个随机整数\nconst getRandom = (start, end) => start + Math.floor(Math.random() * (end - start));\n// 在[start,end]区间里生成n个不重复的随机整数\nconst getRandomN = (n, start, end) => {\n  const set = new Set();\n  while (set.size < n) set.add(getRandom(start, end));\n  return [...set];\n}\n// 生成强度为level，长度为n的密码串\nfunction getPassword (n, level) {\n\n  const Seeds = [\n    'abcdefghijklmnopqrstuvwxyz',\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n    '0123456789',\n    '!@#$%^&amp;*_+=?:',\n  ];\n  let res = '';\n  const indexArr = getRandomN(level, 0, Seeds.length);\n  let targetChars = ''\n  for (const item of indexArr) {\n    res += Seeds[item][getRandom(0, Seeds[item].length)]\n    targetChars += Seeds[item];\n  }\n\n  const remainArr = getRandomN(n - level, 0, targetChars.length)\n  for (const item of remainArr) {\n    res += targetChars[item];\n  }\n  return res;\n}\n</code></pre>\n<ul>\n<li>写一个方法判断给定的字符串是否同态(isomorphic),同态：两个字符串，如果A字符串中的每一个字符都可以在B字符串中找到唯一对应，并且顺序一一对应；如果存在这样的函数，那么A和B同态</li>\n</ul>\n<pre><code class=\"language-js\">function isomorphic (str1, str2) {\n  if (str1.length != str2.length) {\n    return false;\n  }\n  let result = true;\n  let map = {}\n  for (let i = 0; i < str1.length; i++) {\n    let code1 = str1.charCodeAt(i);\n    let code2 = str2.charCodeAt(i);\n    const dif = code1 - code2;\n    if (map.hasOwnProperty(str1[i])) {\n      return dif === map[str1[i]]\n    } else {\n      map[str1[i]] = dif\n    }\n  }\n  return result;\n}\n</code></pre>\n<ul>\n<li>写一个方法将一个html字符串变成JSON树的形式</li>\n<li>请实现一个计算器的功能</li>\n<li>使用js实现摩斯密码的加密和解密</li>\n<li>写一个方法，实时验证input输入的值是否满足金额如：3.56(最多只有两位小数且只能数字和小数点)的格式，其它特殊字符禁止输入</li>\n<li>写一个任意进制转换的程序</li>\n<li>如何判断一个元素文本是否换行？</li>\n<li>使用js写一个方法将数字转换为float,并取N位小数</li>\n<li>使用递归实现指定最小值和最大值之间的所有整数求和</li>\n<li>写一个方法实现指定开始的数字增加到指定的结束数字，步长默认为1</li>\n<li>写个方法将base64的数据流装换为二进制流</li>\n<li>请使用js写个方法解析emoji表情</li>\n<li>写一个方法将ArrayBuffer转为字符串</li>\n<li>使用正则去掉html中标签与标签之间的空格</li>\n<li>写一个方法把科学计数法转换成数字或者字符串</li>\n<li>写一个方法将汉字转换成拼音首字母</li>\n</ul>\n"}}></div>
  }
  