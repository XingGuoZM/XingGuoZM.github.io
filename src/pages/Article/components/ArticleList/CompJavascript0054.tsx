
  import React,{useEffect} from 'react';
 
  import 'highlight.js/styles/xcode.css';
  const hljs = require('highlight.js');

  export default () => {
    useEffect(()=>{
      document.querySelectorAll('code').forEach(el => {
        el.style.backgroundColor='#f8f8f8';
        el.style.marginBottom='0.1rem';
        hljs.highlightElement(el);
      });
    },[])
    return <div style={{fontSize:'0.26rem'}} dangerouslySetInnerHTML={{__html:"<h1>js 面试题</h1>\n<h3>类型</h3>\n<ul>\n<li>infinity代表什么数据？</li>\n<li>如何把10.36四舍五入为最接近的整数？</li>\n<li>把对象转换到字符串类型是如何转换的？</li>\n<li>把对象转换到数字类型是如何转换的？</li>\n<li>请你解释一个为什么10.toFixed(10)会报错？</li>\n<li>如何避免JS浮点运算的精度问题（例：0.1+0.7=0.7999999999999999）</li>\n<li>举例子说说你对js隐式类型转换的理解</li>\n<li>请解释下NaN === NaN的结果</li>\n<li>请介绍下js的数据类型</li>\n<li>举例说明什么是短路求值？</li>\n<li>表达式和语句有什么区别？如何把语句转换为表达式？</li>\n<li>你知道什么是三元表达式吗？“三元” 表示什么意思？使用三元表达式应该注意些什么问题？</li>\n<li>有些js库习惯在代码开头处添加分号有什么作用呢？除了分号还可以换成别的吗？</li>\n<li>JavaScript有几种类型值？能否画出它们的内存图？</li>\n<li>说说你对数据类型转换的理解是什么？类型转换的方法有哪些？</li>\n<li>举例子说明javascript的变量声明提升和函数声明提升</li>\n<li>写出js各类型转化为Boolean的值分别是什么？及转化的规则是什么？</li>\n<li>js如何解决数字精度丢失的问题？</li>\n<li>代码中如果遇到未定义的变量，会抛出异常吗？程序还会不会继续往下走？</li>\n<li>js可以用中文作为变量命名吗？为什么？</li>\n</ul>\n<pre><code>可以使用中文名作为变量，可能导致的问题有\n1. 文档的编码格式不是utf-8可能导致乱码。一般默认编码模式为 utf-8，但有一些编辑器并不会设定默认值，这时候，你就会发现，页面里的中文变成非语义化的字符（俗称乱码）了。或者某些人的浏览器默认编码并不是 utf-8，而是例如 gb2312、gbk 之类的编码，那么也可能产生乱码\n\n2. 命名不当，懂中文的和不懂中文的都看不懂意思\n3. 如果默许可以使用中文，那么这个口子一旦打开，代码里到处是各种中文名字、奇怪的缩写、拼音英文混合，造成混乱局面。\n</code></pre>\n<ul>\n<li>说下js的parseInt()和Number()有什么区别？</li>\n</ul>\n<pre><code>parseInt:parseInt(string, radix) 解析一个字符串并返回指定基数的十进制整数，radix 是 2-36 之间的整数，表示被解析字符串的基数\n</code></pre>\n<ul>\n<li>请问typeof typeof 168的结果是什么？</li>\n</ul>\n<pre><code>'string'\ntypeof 168 // 'number'\ntypeof 'number' // 'string'\n</code></pre>\n<ul>\n<li>请说说new String(&quot;A&quot;)和String(&quot;A&quot;)分别返回的结果，请解释为什么？</li>\n</ul>\n<pre><code>new String('A')返回一个对象，\nString('A')返回一个字符串，原始类型\n</code></pre>\n<ul>\n<li>0.1 + 0.2、0.1 + 0.3和0.1 * 0.2分别等于多少？并解释下为什么？</li>\n</ul>\n<pre><code>0.1转化成二进制是一个无限循环小数，但是计算机只能用有限的位数来存一个数，所以最终，计算机存的数是一个近似于 0.1 的小数。转换的过程中会损失精度\n所以，0.1+0.2是近似值相加\n</code></pre>\n<ul>\n<li>说说instanceof和typeof的实现原理并自己模拟实现一个instanceof</li>\n</ul>\n<pre><code>typeof 运算符返回一个字符串（表示基本数据类型或者对象类型），表示操作数的类型\nUndefined -> &quot;undefined&quot;\nNull -> &quot;null&quot;\nBoolean -> &quot;boolean&quot;\nNumber -> &quot;number&quot;\nBigInt -> &quot;bigInt&quot;\nString -> &quot;string&quot;\nSymbol -> &quot;symbol&quot;\nFunction -> &quot;function&quot;\n其他任何对象 -> &quot;object&quot;\n\ninstanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上\n</code></pre>\n<ul>\n<li>js中=、==、===三个的区别是什么？并说明它们各自的工作过程</li>\n</ul>\n<pre><code>= 表示赋值\n== 表示相等，它会比较不同类型的操作数，并尝试强制类型转换\n1. 如果操作数具有相同的类型，则按如下方式进行比较：\n  对象（Object）：仅当两个操作数引用同一个对象时返回 true。\n  字符串（String）：只有当两个操作数具有相同的字符且顺序相同时才返回 true。\n  数值（Number）：如果两个操作数的值相同，则返回 true。+0 和 -0 被视为相同的值。如果任何一个操作数是 NaN，返回 false；所以，NaN 永远不等于 NaN。\n  布尔值（Boolean）：仅当操作数都为 true 或都为 false 时返回 true。\n  大整形（BigInt）：仅当两个操作数值相同时返回 true。\n  符号（Symbol）：仅当两个操作数引用相同的符号时返回 true。\n2. 如果其中一个操作数为 null 或 undefined，另一个操作数也必须为 null 或 undefined 以返回 true。否则返回 false。\n3. 如果其中一个操作数是对象，另一个是基本类型，按此顺序使用对象的 @@toPrimitive()（以 &quot;default&quot; 作为提示），valueOf() 和 toString() 方法将对象转换为基本类型。（这个基本类型转换与相加中使用的转换相同。）\n4. 在这一步，两个操作数都被转换为基本类型（String、Number、Boolean、Symbol 和 BigInt 中的一个）。其余的转换是逐个进行的。\n  如果是相同的类型，使用步骤 1 进行比较。\n  如果其中一个操作数是 Symbol 而另一个不是，返回 false。\n  如果其中一个操作数是布尔型而另一个不是，则将布尔型转换为数字：true 转换为 1，false 转换为 0。然后再次松散地比较两个操作数。\n  Number to String：使用与 Number() 构造函数相同的算法将字符串转换为数字。转换失败将导致 NaN，这将保证相等是 false。\n  Number to BigInt：按数值进行比较。如果数值为 ±∞ 或 NaN，返回 false。\n  String to BigInt：使用与 BigInt() 构造函数相同的算法将字符串转换为 BigInt。如果转换失败，返回 false。\n\n=== 表示严格相等，严格相等运算符总是认为不同类型的操作数是不同的\n如果操作数的类型不同，则返回 false。\n如果两个操作数都是对象，只有当它们指向同一个对象时才返回 true。\n如果两个操作数都为 null，或者两个操作数都为 undefined，返回 true。\n如果两个操作数有任意一个为 NaN，返回 false。\n否则，比较两个操作数的值：\n数字类型必须拥有相同的数值。+0 和 -0 会被认为是相同的值。\n字符串类型必须拥有相同顺序的相同字符。\n布尔运算符必须同时为 true 或同时为 false\n\n\n严格相等运算符总是认为不同类型的操作数是不同的，相等会尝试类型转换\n</code></pre>\n<ul>\n<li>解释下为什么{} + [] === 0为true？而[]+{}===0为false</li>\n</ul>\n<pre><code>先说 [] + {} 。\n一个数组加一个对象。 加法会进行隐式类型转换，规则是调用其 valueOf() 或 toString() 以取得一个非对象的值（primitive value）。如果两个值中的任何一个是字符串，则进行字符串串接，否则进行数字加法。\n [] 和 {} 的 valueOf() 都返回对象自身，所以都会调用 toString()，最后的结果是字符串串接。[].toString() 返回空字符串，({}).toString() 返回“[object Object]”。最后的结果就是“[object Object]”。\n\n 然后说 {} + [] 。看上去应该和上面一样。但是 {} 除了表示一个对象之外，也可以表示一个空的 block。在 [] + {} 中，[] 被解析为数组，因此后续的 + 被解析为加法运算符，而 {} 就解析为对象。但在 {} + [] 中，{} 被解析为空的 block，随后的 + 被解析为正号运算符。即实际上成了： \n { // empty block }\n +[]\n即对一个空数组执行正号运算，实际上就是把数组转型为数字。首先调用 [].valueOf() 。返回数组自身，不是primitive value，因此继续调用 [].toString() ，返回空字符串。空字符串转型为数字，返回0，即最后的结果。\n</code></pre>\n<ul>\n<li>举例说明+运算符的运行机制</li>\n</ul>\n<pre><code>一元加（+）运算符在其操作数之前并计算其操作数，但会尝试将其转换为数字\n</code></pre>\n<ul>\n<li>请描述下null和undefined的区别是什么？这两者分别运用在什么场景？</li>\n</ul>\n<pre><code>null表示空；undefined表示不存在\n\nnull运用场景\n1. 变量初始化\n2. 原型链的终点\n\nundefined运用场景\n1. 函数没有返回值，默认返回undefined\n2. 变量已声明未赋值\n3. 调用函数时，该提供的参数未提供\n</code></pre>\n<ul>\n<li>你知道1和Number(1)的区别是什么吗？</li>\n</ul>\n<pre><code>在不使用new关键字作建构对象实例时，使用像Number(123)这样的语法，这是一种从其他资料类型要转到数字类型的函数调用语法。调用后仍然是原始资料类型，并不会产生包装对象实例\n</code></pre>\n<ul>\n<li>请解释下NaN表示什么呢？typeof NaN结果是什么？</li>\n</ul>\n<pre><code>全局属性 NaN 是一个表示非数字的值\ntypeof NaN // 'number'\n</code></pre>\n<ul>\n<li>请分析020-088=?的过程及结果</li>\n</ul>\n<pre><code>020会被识别未8进制，即16，088会被识别为10进制即88，所以最后结果为-72\n</code></pre>\n<ul>\n<li>判断[].<strong>proto</strong>.<strong>proto</strong> === {}.__proto__结果并解释为什么?</li>\n</ul>\n<pre><code>true\n通过原型链，查找到的都是Object构造函数原型对象\n</code></pre>\n<ul>\n<li>js中的undefined和 ReferenceError: xxx is not defined 有什么区别？</li>\n</ul>\n<pre><code>undefined是javascript语言中定义的五个原始类中的一个，换句话说，undefined并不是程序报错，而是程序允许的一个值。\nnot defined是javascript在运行我们的javascript代码时，遇到没有定义就用来运算的变量时爆出来的错误。\n\n在许多的javascript教程中都介绍有javascript变量即使不定义也可以直接拿来使用，但是请注意，这个使用是指可以被赋值，但是不可以被运算。例如\nvar temp;\ntemp2 = 123;\nalert(temp2);\ntemp3 = temp4+1; //报错，temp4 not defined\nalert(temp3) \n</code></pre>\n<ul>\n<li>Math.min() < Math.max() 返回结果是什么？为什么？</li>\n</ul>\n<pre><code>Math.min() // Infinity\nMath.max() // -Infinity\n引用mdn：Math.min() 函数返回作为输入参数的数字中最小的一个，如果没有参数，则返回 Infinity；Math.max() 函数返回作为输入参数的最大数字，如果没有参数，则返回 -Infinity\n</code></pre>\n<ul>\n<li>js中的数字在电脑内存储为多少Byte？</li>\n</ul>\n<pre><code>js内部，所有数字都是以64位浮点数形式存储的，整数也是。64bit = 8byte\n</code></pre>\n<h3>优化</h3>\n<ul>\n<li>你理解的&quot;use strict&quot;;是什么?使用它有什么优缺点？常见的在严格模式下的现象</li>\n</ul>\n<pre><code>&quot;use strict&quot;指代码在严格条件下执行。严格模式的意义让项目中代码可以在严格条件下执行，可以限制一些不良的编码习惯，把问题在编码阶段就可以暴露出来\n优点：\n1. 严格模式通过抛出错误来消除一些原有的静默错误\n2. 有时候严格模式下的代码比非严格模式运行更快\n3. 消除js一些不合理、不严谨之处，减少一些怪异行为\n4. 消除一些不安全之处，保证代码运行安全\n5. 提高编译效率，增加运行速度\n6. 为未来的新版本做铺垫\n缺点：\n1. 缺失许多开发人员已经习惯的功能\n2. 无法访问function.caller和function.arguments。\n3. 以不同严格模式编写的脚本合并后可能导致问题。\n现象：\n1. 禁止this指向全局对象\n2. 全局变量必须显式声明\n3. 不能使用未声明的变量\n4. 去除了with语句\n5. 不能修改arguments，不能在函数内定义arguments变量，不能使用argument.caller和argument.callee\n</code></pre>\n<ul>\n<li>说说你对RAIL性能评估模型的了解</li>\n</ul>\n<pre><code>RAIL模型是Chrome团队于2020.6发布的一种以用户为中心的性能模型。 它提供了一种考虑性能的结构。该模型将用户体验分解为关键操作（例如，点击、滚动、加载），并帮助您为每个操作定义性能目标。RAIL 代表 Web 应用程序生命周期的四个不同方面：响应(R)、动画(A)、空闲时间(I)和加载(L)\n\nResponse : 在 50 毫秒内处理事件\n目标：在 100 毫秒内完成由用户输入发起的转换，让用户感觉交互是即时的。\n指导方针：\n事件处理函数尽量保证在50ms内完成，考虑到idle task的情况，事件会排队，等待时间大概在50ms。适用于click，toggle，starting animations等，不适用于drag和scroll；\n复杂的js计算尽可能放在后台，如web worker，避免对用户输入造成阻塞 ；\n超过50ms的响应，一定要提供反馈，比如倒计时，进度百分比等\n\nAnimation：在 10 毫秒内生成一帧\n目标：\n产生每一帧的时间不要超过10ms，为了保证浏览器60帧，每一帧的时间在16ms左右，但浏览器需要用6ms来渲染每一帧。\n旨在视觉上的平滑。用户对帧率变化感知很敏感\n指导方针：\n在一些高压点上，比如动画，不要去挑战cpu，尽可能地少做事，如：取offset，设置style等操作。尽可能地保证60帧的体验。\n\nIdle：空闲。指利用好空闲时间\n目标：最大化空闲时间，以增大50ms内响应用户输入的几率\n指导方针：\n用空闲时间来完成一些延后的工作（比如说埋点），如先加载页面可见的部分，然后利用空闲时间加载剩余部分，此处可以使用\n在空闲时间内执行的任务尽量控制在50ms以内，如果更长的话，会影响input handle的pending时间\n如果用户在空闲时间任务进行时进行交互，必须以此为最高优先级，并暂停空闲时间的任务\n\nload： 传输内容到页面可交互的时间不超过5秒\n如果页面加载比较慢，用户的交点可能会离开。加载很快的页面，用户平均停留时间会变长，跳出率会更低，也就有更高的广告查看率\n目标：\n优化加载速度，可以根据设备、网络等条件。目前，比较好的一个方式是，让你的页面在一个中配的3G网络手机上打开时间不超过5秒\n对于第二次打开，尽量不超过2秒\n指导方针：\n在手机设备上测试加载性能，选用中配的3G网络（400kb/s，400ms RTT），可以使用 WebPageTest 来测试\n要注意的是，即使用户的网络是4G，但因为丢包或者网络波动，可能会比预期的更慢\n禁用渲染阻塞的资源，延后加载defer、async等\n可以采用 lazy load、code-splitting等 其他优化手段，让第一次加载的资源更少\n影响页面加载性能的因素：\n网络速度和延迟\n硬件（例如较慢的CPU）\n缓存\n二级/三级缓存中的差异\n解析JavaScript\n</code></pre>\n<ul>\n<li>如何计算动画的帧率（FPS）？</li>\n</ul>\n<pre><code>requestAnimationFrame\n</code></pre>\n<ul>\n<li>前端如何保持与服务器时间同步（如何解决客户端与服务端时间不对称的问题）？</li>\n</ul>\n<pre><code>方案一：初次请求数据，将服务器的时间拿过来，通过计时器计时\n弊端：\n第一：存在网络延迟问题，前端真正拿到这个时间数据的时候并不能保证它是服务器的当前时间，因为还存在一个响应时间在里面\n第二：通过计时器计时，例如setTimeout、setInterval这种方法，同样存在误差。不同平台的误差不一样，会被机器的性能、内存占用等多方面因素影响，一分钟可能会误差几秒钟，这种误差值无法被接收的。另一种做法是通过轮询拿服务器时间，但不会这么做。\n\n方案二：在常规的做法基础上，解决它所带来的弊端。\n第一，怎么解决响应时间问题，performance记录发送请求和接收响应的时间再做差\n第二，怎么缩小计时过程中的误差，保持客户端时间和服务端时间的一致，我们可以通过本地时间计算出服务器时间，在第一次请求回来的时候，计算出服务器和客户端时间差，后面都通过这个差值计算出服务器时间\n弊端：\n在定时获取本地时间的过程中，本地时间很有可能被修改\n\n方案三：在以上的基础上，要检测出本地时间被修改的问题，我们要计算出计时的误差，可以把每次定时获取的本地时间通过变量记录下来，而我们已知定时获取的周期，这样就可以计算出本次的预期时间，有了预期值和实际值就能算出误差了。我们可以通过设置一个误差最大值，如果超出了就开始纠正，公式如下\nif(实际误差值>最大误差常量){\n  服务器时间 = 本地时间 + 网络延迟时间 + 实际误差值\n}else{\n  服务器时间 = 本地时间 + 网络延迟时间\n}\n\n</code></pre>\n<ul>\n<li>内存泄漏和内存溢出有什么区别</li>\n</ul>\n<pre><code>内存溢出 out of memory，是指程序在申请内存时，没有足够的内存空间供其使用，出现out of memory；比如申请了一个integer,但给它存了long才能存下的数，那就是内存溢出。内存溢出就是你要求分配的内存超出了系统能给你的，系统不能满足需求，于是产生溢出。\n\n内存泄漏是指你向系统申请分配内存进行使用(new)，可是使用完了以后却不归还(delete)，结果你申请到的那块内存你自己也不能再访问（也许你把它的地址给弄丢了），而系统也不能再次将它分配给需要的程序。内存泄露 memory leak，是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存,迟早会被占光\n\n引起内存溢出的原因\n1.内存中加载的数据量过于庞大，如一次从数据库取出过多数据；\n2.集合类中有对对象的引用，使用完后未清空，使得JVM不能回收；\n3.代码中存在死循环或循环产生过多重复的对象实体；\n4.使用的第三方软件中的BUG；\n5.启动参数内存值设定的过小\n\n重点排查\n1.检查代码中是否有死循环或递归调用。\n2.检查是否有大循环重复产生新对象实体。\n3.检查List、MAP等集合对象是否有使用完后，未清除的问题。List、MAP等集合对象会始终存有对对象的引用，使得这些对象不能被GC回收。、\n</code></pre>\n<ul>\n<li>你是如何排查js内存泄漏的？造成内存泄漏的操作有哪些？</li>\n</ul>\n<pre><code>使用chrome面板的Performance和Memory\n\n当我们怀疑页面发生了内存泄漏的时候，可以先用Performance录制一段时间内页面的性能变化如果录制结束后，看到内存的下限在不断升高的话，你就要注意了 —— 这里有可能发生了内存泄漏。除了内存增长曲线，Nodes（Dom节点数曲线）、Document曲线以及Listener曲线也同样值得关注，有时候它们对内存问题的定位也很有帮助。当你怀疑发生了内存泄漏的时候，你就可以用Memory面板来进一步定位泄漏的源头了\n\n记录当前的堆内存快照（heap snapshot）,查看Shallow size 和 Retained size\n它们有什么不同？\nShallow size: 这是对象自身占用内存的大小。通常只有数组和字符串的shallow size比较大。\nRetain size: 这是将对象本身连同其无法从 GC 根到达的相关对象一起删除后释放的内存大小。 因此，如果Shallow Size = Retained Size，说明基本没怎么泄漏。而如果Retained Size > Shallow Size，就需要多加注意了。\n\n造成内存泄漏的操作有\n1. 意外创建的全局变量，即使用了未声明的变量而创建了一个全局变量，这个变量一直留在内存中无法被回收\n2. 设置了setInterval，忘记取消它。如果回调函数有对外部变量引用的话，那么这个变量会一直留在内存中无法被回收\n3. 我们获取一个DOM元素的引用，而后面这个元素被删除，由于我们一直保留了对这个元素的引用，所以它也无法被回收\n4. 不合理的使用闭包，从而导致某些变量一直被留在内存当中\n5. dom引用，当dom元素被删除时，内存中的引用未被正确清空\n6. 控制台console.log打印的东西\n</code></pre>\n<ul>\n<li>如何设计一个JS SDK？说说你的方法</li>\n</ul>\n<pre><code>SDK全称是“Software Development Kit”，直译就是软件开发工具集。比如 Java SDK（JDK），就是一个Java领域的软件包。基于它，开发人员就可以快速构建自己的Java应用。比较规范的SDK一般都会包含若干的API、开发工具集和说明文档。基于JS封装的SDK更多常见于UI组件库、统计分析、web服务接口封装、前端稳定性和性能监控等场景。\n\n遵从的设计原则：\n1. 最小可用性原则，即用最少的代码，如无必要勿增实体\n2. 最少依赖原则，即最低限度的外部依赖，如无必要勿增依赖\n\nSDK要求\n1. 满足功能需求：SDK一般都是偏于面向某个领域，所以，同时在设计和实现的时候明确职责和边界很重要，同时还应该足够精简，专注领域内的业务。\n2. 足够稳定：绝不能导致宿主应用崩溃，这是最基础也是最严格的要求；较好的性能，比如SDK体积应尽量小，运行速度尽量快；可测试，保障每一次变更；向后兼容，不轻易出现 Breakchange\n3. 少依赖，易扩展：最小程度的第三方依赖，尽可能自行实现，确实无法避免则最小化引入；插件化，最大限度支持扩展；Hook机制，满足个性化诉求\n\n怎么实现\n1.明确职责，限定边界：例如要做一个面向前端h5领域的稳定性监控和性能监控的SDK，稳定性上要关注的点JS异常、资源加载异常、API请求的异常和白屏异常；在性能方面需要关注的点可以参考Rail模型，响应时间、动画帧率、空闲时间、白屏时间、可交互时间、首屏时间等。\n\n2. 基础框架：确定SDK的引用形式，例如CDN和 NPM两种引入方式；确定SDK的版本管理机制，现有较成熟的版本管理机制当属 语义化版本号 ，表现形式为 {主版本}.{次版本}.{补丁版本}，简单易记好管理；确定SDK的基础接口，接口是SDK和用户沟通的桥梁，每一个接口对应着一个独立的SDK功能，并且有明确的输入和输出，遵从单一职责、简单清晰命名、参数校验和逻辑保护，例如jsSdk.reportJSError(error)、jsSdk.report(logData)等\n\n3. 模块细分\nSDK底层提供基础的能力，包括上面提到的内核、插件机制的实现、工具类库以及暴露给用户的基础API\n\n所有模块都以插件的形式存在，即各领域的功能都各自松散的做实现，这样使得底层能力更具通用性，同时扩展能力也更强，用户甚至也可以封装自己的插件。\n\n业务部分更多是对于不同宿主环境的多入口适配，当前支持浏览器、Weex以及NodeJS。\n</code></pre>\n<ul>\n<li>JQuery的源码看过吗？能不能简单概括一下它的实现原理？</li>\n<li>举例说明什么是响应式编程？</li>\n<li>你知道什么是纯函数吗？</li>\n<li>什么是函数式编程？它有什么优缺点？</li>\n<li>举例说明为什么说ES模块比commonJS模块还优秀？</li>\n<li>请说说commonJS模块与ES模块的差异有哪些？</li>\n<li>说下你对IoC的理解，它有什么运用场景？</li>\n<li>说说你对js中的依赖注入的理解，它的实现方式有哪些呢？</li>\n<li>举例说明面向对象编程有什么缺点？</li>\n<li>日常开发中写JS循环时应该注意哪些情况？</li>\n<li>js循环的数据量很大（例如100W+）时会出现什么情况？如何进行性能优化？</li>\n<li>你是如何比较js函数的执行速度的？</li>\n<li>你是如何做前端性能分析的？从哪些方面入手？有哪些指标？</li>\n<li>客户端与服务端时间为什么会不对称？不对称将会出现哪些问题？</li>\n<li>如何排查页面中CPU占用高的情况？</li>\n<li>javascript什么时候会占CPU？</li>\n<li>在chrome中js的数组占用了多少内存？</li>\n<li>举例说明哪些场景会遇到超大计算量的问题？</li>\n<li>请说说DOM节点的操作如何优化？</li>\n<li>字符串拼接有哪些方式？哪种性能好？</li>\n<li>你认为es5的设计缺陷有哪些？</li>\n<li>一次JS的请求哪些地方会有缓存处理？</li>\n<li>js如何实现函数缓存？函数缓存有什么运用场景？</li>\n<li>说说你对堆栈跟踪的理解</li>\n<li>使用try catch哪些异常是捕获不到的？哪些能捕获到？捕获不到的要怎样才能捕获到？</li>\n<li>ReferenceError和TypeError有什么区别？</li>\n<li>js的请求一般情况下在哪些地方会有缓存的处理？</li>\n<li>如何设计一个pageAPI？说说你的方法</li>\n<li>SeaJS和RequireJS有什么区别？</li>\n<li>如果要你自己实现一个requireJS库，你该怎么做？</li>\n<li>请使用js实现商品的sku，并说说你的思路</li>\n<li>举例说明Object.defineProperty会在什么情况下造成循环引用导致栈溢出？</li>\n<li>csrf 攻击是怎样攻击的？ 如何防御？</li>\n<li>有什么方案可以提高无限滚动列表的性能</li>\n<li>js延迟加载的方式有哪些？</li>\n<li>在js中怎么捕获异常？写出来看看？应该在哪些场景下采用呢？</li>\n<li>请为什么说js是单线程，而不是多线程呢？</li>\n<li>为什么说js是弱类型语言，它的优缺点分别是什么？</li>\n<li>你了解什么是AOP吗？它的作用是什么？举个例子</li>\n<li>说下你对面向对象的理解</li>\n<li>ES5和ES6、ES7有什么区别？</li>\n<li>你平时是怎么调试js的？会断点调试吗？断点调试有什么技巧呢？</li>\n<li>js垃圾回收的方式有哪些？</li>\n<li>说出至少十条你理解的js规范</li>\n<li>请说说你对try/catch的理解，平时有在哪些场景会用到呢？</li>\n<li>说说你对异常处理和错误处理的理解</li>\n<li>js依赖注入的实现思路是什么？它有什么优缺点呢？</li>\n</ul>\n<h3>异步</h3>\n<ul>\n<li>你是如何更好地处理Async/Await的异常的？</li>\n<li>假设要在UI渲染之前处理一些事情你该怎么办？</li>\n<li>实现异步编程有哪些方式？推荐用哪种？</li>\n<li>promise有哪几种状态？是如何变化的？</li>\n<li>Promise和setTimeout执行先后有什么区别？</li>\n<li>promise的构造函数是同步执行还是异步执行，它的then方法呢？</li>\n<li>如何取消promise？</li>\n<li>请说说你对promise的理解</li>\n<li>setTimeout(fn,0)，延迟执行吗？</li>\n<li>请解释下setTimeout的运行机制</li>\n<li>setTimeout和setInterval有什么区别呢？</li>\n<li>setTimeout的第三个参数有什么用？</li>\n<li>如何捕获 setTimeout 异常</li>\n<li>切换标签窗口后js定时器自动停止了，如何在激活标签后又继续呢？</li>\n<li>你对事件循环有了解吗？说说看！</li>\n<li>解释下JavaScript并发模型</li>\n<li>js循环中调用异步的方法，如何确保执行结果的顺序是正确的？</li>\n<li>现在有一个宏任务，又有一个微任务两者同一层级，在微任务里面又有一个宏任务和一个微任务，请问执行顺序是什么,为什么？</li>\n<li>微任务和宏任务有什么区别？</li>\n<li>异步请求重试策略有哪些呢？</li>\n<li>前端异步的使用场景有哪些？</li>\n<li>说说你理解的同步和异步的区别是什么？</li>\n<li>js异步加载有哪些方案？</li>\n<li>异步加载和延迟加载有什么区别？</li>\n<li>requestIdleCallback在EventLoop的什么阶段执行？如何执行？</li>\n<li>requestAnimationFrame在EventLoop的什么阶段执行？</li>\n<li>EventLoop有优点但也有缺点，请说说它的缺点是什么？</li>\n<li>你知道什么是空闲回调(requestIdleCallback)吗？</li>\n<li>接口请求时需要做哪些安全处理？怎么做？</li>\n<li>ajax请求地址只支持http/https吗？能做到让它支持rtmp://等其它自定义协议吗 ？</li>\n<li>说说防止重复发送ajax请求的方法有哪些？各自有什么优缺点？</li>\n<li>ajax如何接收后台传来的图片？</li>\n<li>一个api接口从请求数据到请求结束共与服务器进行了几次交互？</li>\n<li>axios拦截器原理是什么？</li>\n<li>axios为什么可以使用对象和函数两种方式调用？是如何实现的？</li>\n<li>fetch和axios请求的原理都是基于XMLHttpRerequst吗？</li>\n<li>使用ajax轮询接口有什么优缺点？</li>\n<li>在axios中怎样添加授权验证？</li>\n<li>Ajax请求中get和post方式有什么区别呢？分别在哪些场景下使用？</li>\n<li>formData主要是用来做什么的？它的操作方法有哪些？</li>\n<li>fetch 和 ajax 区别</li>\n<li>axios如何一次发送多个并发请求</li>\n<li>请详细描述AJAX的工作原理</li>\n<li>请描述下ajax的请求都有哪些步骤？</li>\n<li>说说CORS为何要区分预检请求和简单请求呢？</li>\n<li>你知道什么是PAJAX吗？它和AJAX有什么区别？它的应用场景有哪些？</li>\n<li>axios为什么能在浏览器中环境运行又能在node中环境运行？</li>\n<li>ajax请求中为何会出现OPTIONS请求？</li>\n<li>pjax和ajax的区别是什么？</li>\n<li>你有使用过pjax吗？它的原理是什么？</li>\n<li>使用ajax请求真的不安全吗？为什么？</li>\n<li>axios相比原生ajax的优点有哪些呢？</li>\n<li>ajax的请求状态有哪几种？</li>\n<li>请说说json和jsonp的区别？</li>\n<li>JSONP的原理是什么？解决什么问题？</li>\n<li>当用户刷新网页时，js的请求有哪些地方会有缓存处理呢？</li>\n<li>页面的编码和被请求的资源编码不一致时如何处理？</li>\n</ul>\n<h3>数据结构与算法</h3>\n<ul>\n<li>说说你对js排序的理解，你有了解哪些算法呢？举例说明数组的排序方法有哪些？</li>\n<li>分析下'sum = n * (n - 1) / 2'的时间复杂度是什么？</li>\n<li>一个好的算法都应包含哪些要素？</li>\n<li>请解释下算法有什么特征（基本要素）？</li>\n<li>请解释下数据结构与算法的关系</li>\n<li>说说你对数据结构和数据类型的理解</li>\n<li>哈希表的原理是什么？</li>\n<li>如果要让你去实现一个散列函数，你将从哪些方面考虑？</li>\n<li>什么是散列函数？它有什么特征？</li>\n<li>是否所有的循环都能用递归代替？为什么？如果不可以，请举例说明</li>\n<li>你觉得递归好写吗？</li>\n<li>解释下深度优先遍历和广度优先遍历的区别及如何实现</li>\n<li>为什么js里定义的数组可以不定长且数据类型可以不固定呢？</li>\n<li>js最大支持多少长度的数组？为什么？</li>\n<li>说说你对稀疏数组的理解</li>\n<li>举例说明你对尾递归的理解，它有什么应用场景？</li>\n<li>举例说明js中什么是尾调用优化？</li>\n<li>Number()的存储空间是多大？假如接口返回一个超过最大字节的数字怎么办？</li>\n<li>使用js按贝格尔编排算法生成单循环对阵表</li>\n<li>构造一个自定义二维 N<em>N 矩阵，从左上角第一个单元格依次填入1 - N</em>N的数字，从矩阵中指定单元格出发，经过相邻的单元格(不可重复)，走 X 步，输出所有可能的路径和每条路径单元格对应的数字。</li>\n<li>计算从一个大数组中(如1万条数据)取出第一数据和最后一条数据的时间分别是多少？</li>\n</ul>\n<pre><code>时间相同，数组一种线性表数据结构，用一组连续的内存空间，来存储一组具有相同类型的数据。数组是用连续内存空间存储相同类型的元素，就是因为有这个限制条件，使得数组按照下标随机访问(随机访问：可以用同等的时间访问到一组数据中的任意一个元素)数组中数据元素时间复杂度达到 O(1) 级别\n</code></pre>\n<h3>BOM</h3>\n<ul>\n<li>如何解决在手机上长时间点击会选中图</li>\n<li>js操作节点的方法有哪些？</li>\n<li>为什么jsonp不支持post的方法？</li>\n<li>document.write和innerHTML有什么区别？</li>\n<li>如何使用js来截图？怎样截可见区域和整个页面？</li>\n<li>添加原生事件如果不移除为什么会内存泄露？</li>\n<li>使用原生js给一个按钮绑定两个onclick事件</li>\n<li>如何监听浏览器窗口大小变化？</li>\n<li>请说说html、body、document、window四者的区别是什么？</li>\n<li>window对象和document对象有什么区别？</li>\n<li>请说说你对事件冒泡机制的理解？</li>\n<li>移动端点击事件为什么会有延迟？有哪些方法可以解决？</li>\n<li>AudioContext有什么应用场景？</li>\n<li>如何按回车自动提交表单</li>\n<li>在设置keyup监听事件后按F5刷新和按浏览器中刷新键刷新有什么区别？</li>\n<li>innerHTML与outerHTML有什么区别？</li>\n<li>Geolocation.getCurrentPosition()用来做什么的？在什么浏览器不受兼容？</li>\n<li>document.domain的作用是什么？它有什么限制？</li>\n<li>说下你对alert的理解，它有哪些特性呢？及使用它时要注意些什么？</li>\n<li>如何创建视频文件的blob？</li>\n<li>举例说明createDocumentFragment和createElement有什么区别？</li>\n<li>解释下点击一个input输入框，依次会触发哪些事件？</li>\n<li>如何区分返回内容是文件流还是json数据？</li>\n<li>请问，javascript可以读取本地的文件吗？为什么？</li>\n<li>js的控制台输出，平时除了用console.log外，你还知道哪些？使用console.log应该注意什么？</li>\n<li>平时调试用console.log的输出结果可信吗？为什么？</li>\n<li>用原生js获取DOM元素的方法有哪些？</li>\n<li>W3C的事件处理和IE的事件处理有哪些区别？</li>\n<li>你对window的属性devicePixelRatio有了解吗？说说它有什么实际应用场景？</li>\n<li>举例说明你对事件代理的理解</li>\n<li>解释下offsetWidth、clientWidth、scrollWidth这三者的区别是什么？</li>\n<li>举例说明常用的BOM属性和方法有哪些？</li>\n<li>各浏览器的事件机制有什么不同？ 如何阻止事件冒泡？</li>\n<li>举例说明js拖拽用到的事件有哪些？</li>\n<li>onload事件和domcontentloaded哪个先执行呢？</li>\n<li>返回到顶部的方法有哪些？把其中一个方法出来</li>\n<li>&quot;attribute&quot;和&quot;property&quot;有什么不同？</li>\n<li>为什么会有跨域问题？怎么解决跨域？</li>\n<li>document的load 和ready有什么区别？</li>\n<li>什么是事件委托？它有什么好处？能简单的写一个例子吗？</li>\n<li>有用过HTML5的WebWork吗？它主要解决了什么问题？</li>\n<li>如何终止WebWork？</li>\n<li>请解释下什么是cookie隔离？为什么要隔离？如何隔离？</li>\n<li>举例说明什么是decodeURI()和encodeURI()是什么？</li>\n<li>请描述你对浏览器同源策略的理解</li>\n<li>把Script标签放在页面最底部的</body>之前和之后有什么区别？浏览器会如何解析它们？</li>\n<li>写例子说明如何给li绑定事件（ul下有1000+个li）？</li>\n<li>要实现一个js的持续动画，你有什么比较好的方法？</li>\n<li>不依赖第三方库，说下如何使用js读取pdf？</li>\n<li>不用第三方库，说说纯js怎么实现读取和导出excel？</li>\n<li>能否正确获取本地上传的文件路径？如果可以怎么做？如果不可以解释下为什么？</li>\n<li>请说说escape、encodeURI、decodeURI、encodeURIComponent和decodeURIComponent的区别？</li>\n<li>你有用过webRTC吗？它有什么运用场景？</li>\n<li>保护js代码的方式有哪些？分别说说他们的原理是什么？</li>\n<li>举例说明js关闭当前窗口有哪些方法？</li>\n<li>说说用原生js实现封装一个选项卡的功能</li>\n<li>用js实现页面局部打印和预览原理是什么呢？同时在IE上有什么不同？</li>\n<li>阻止事件的默认行为有哪些？说说它们之间的区别是什么？</li>\n<li>请举例说明动态操作DOM的方法有哪些？</li>\n<li>你有使用过ExtJs吗？说说它的优缺点是什么？</li>\n<li>你有使用过BackboneJS吗？说说它和vue有什么区别？</li>\n<li>js事件中currentTarget和target的区别是什么？</li>\n<li>写例子说明js中自定义事件的使用与触发</li>\n<li>getelementbyId和queryselect平时经常使用哪一个？说说你的看法</li>\n<li>如何实现锁定网页、密码解锁的效果？说说你的方法和步骤是什么？</li>\n<li>在js中attribute和property的区别是什么？</li>\n<li>你有使用过FileReader吗？说说它有哪些应用场景？</li>\n<li>stopPropagation()和preventDefault()这两个方法有什么区别？</li>\n<li>你有用过哪些3D渲染的库？</li>\n<li>如果让你把把html页面导出为pdf，不用插件的话，你该怎么做？</li>\n<li>pageshow和pageshide有什么应用场景呢？</li>\n<li>有了解过getSelection API吗？怎么使用，有哪些场景？</li>\n<li>window.console.log()和console .log()有区别吗？体现在哪里？</li>\n<li>getElementById和querySelector方法的区别是什么？</li>\n<li>举例说明document.execCommand有哪些用途</li>\n<li>说说你对postMessage的理解，它有什么运用场景呢？</li>\n<li>用js封装一个前端分页的库，说说你的思路</li>\n<li>页面上的DOM有多个相同的ID，用js获取时结果会是怎么样的？</li>\n<li>如何在用户刷新、跳转、关闭浏览器时向服务端发送统计的数据？</li>\n<li>在浏览器标签页之间切换触发的事件是哪个？</li>\n<li>说说你对HTML5中video blob的理解</li>\n<li>你觉得虚拟DOM快吗？还有没有比它还快的方式？</li>\n<li>DOM0、DOM2、DOM3事件处理方式的区别是什么？</li>\n<li>有用过Handlebars模板引擎吗？它的工作原理是怎样的？</li>\n<li>举例说明js鼠标事件有哪些？</li>\n<li>微信的JSSDK都有哪些内容？如何接入？</li>\n<li>script所在的位置会影响首屏显示时间吗？</li>\n<li>在DOM上同时绑定两个点击事件（一个用捕获，一个用冒泡），事件总共会执行几次，先执行哪个事件？</li>\n<li>flash如何与js交互？</li>\n<li>在不支持js的浏览器中如何隐藏JavaScript代码？</li>\n<li>alert如何让文本换行？</li>\n<li>innerHTML有什么缺点？</li>\n<li>localStorage什么时候过期？</li>\n<li>说说你对JSBridge的理解</li>\n<li>写一个 document.querySelector 的逆方法</li>\n<li>说说你对js沙箱的理解，它有什么应用场景？</li>\n<li>js源代码压缩都有哪些方法？它们的压缩原理分别是什么？</li>\n<li>微信小程序实现轨迹回放，微信原生小程序，基于uniapp的小程序？</li>\n<li>你用过Navigator.sendBeacon()吗？说说它有什么应用场景？</li>\n<li>async属性诞生的初衷是什么？</li>\n<li>你能用js模拟出右键的复制和粘贴功能吗？如果可以说下是如何操作的？如果不可以请说明下理由</li>\n<li>js延迟加载的方式中，只有IE浏览器支持的是哪一种方式</li>\n<li>当用户打开一个网页时，想一直停留在当前打开的页面，如何禁止页面前进和后退</li>\n<li>前端下载文件的方式有哪些？</li>\n<li>使用window.open(url)下载文件时为什么会被浏览器拦截？如何解决？</li>\n<li>sessionStrorage也可以使用onstorage事件吗?</li>\n<li>动态加载的li如何绑定事件？</li>\n<li>getComputedStyle和element.style有什么不同？</li>\n<li>说说MutationObserver的应用场景有哪些？</li>\n<li>在多个页面之间需要传递参数，你是如何传递这些参数的？</li>\n<li>怎样做到js无阻塞加载？</li>\n<li>什么情况下会出现js阻塞？</li>\n<li>cookie的值可以设置为中文吗？为什么？如果可以怎么设置？</li>\n<li>你有用过哪些模板引擎？你觉得哪个好用？为什么？</li>\n<li>浏览器中window.length的结果是什么？为什么？</li>\n<li>浏览器中的剪切板是如何监听复制事件的？</li>\n<li>使用js如何改变url参数值，并且页面不刷新？</li>\n<li>举例说明判断浏览器是否支持某个事件的方法有哪些？</li>\n<li>请说说focus、blur与focusin、focusout的区别是什么？</li>\n<li>列举出JS的全局函数</li>\n<li>url链接中如果有两个问号会出现什么问题？如果通过js获取url的参数时能正常获取到吗？</li>\n<li>请问css/html/js/img的下载顺序是怎样的？都是并发执行的吗？</li>\n</ul>\n<h3>对象</h3>\n<ul>\n<li>callee和caller的区别和作用是什么？</li>\n<li>js的sort方法运用场景有哪些？</li>\n<li>如何让js的filter方法支持大小写？</li>\n<li>举例说明这三种方法map、reduce和filter的区别是什么？</li>\n<li>说说你对ArrayBuffer的理解！它和Array有什么区别？</li>\n<li>js能够保证object属性的输出顺序吗？如果可以怎么做？</li>\n<li>对象的键可以重复吗？为什么？如果可以重复将会又什么样的表现？</li>\n<li>举例说明js创建数组有哪些方法？</li>\n<li>如果使用JSON.stringify进行深拷贝有什么弊端？如何解决？</li>\n</ul>\n<pre><code>1. 函数\n2. undefined\n3. 循环引用\n</code></pre>\n<ul>\n<li>\n<p>请说说你对内置对象和宿主对象的理解</p>\n</li>\n<li>\n<p>深拷贝里的循环引用如何解决？</p>\n</li>\n<li>\n<p>js中Iterable对象和Array有什么区别？</p>\n</li>\n<li>\n<p>map和forEach有什么区别？</p>\n</li>\n<li>\n<p>使用delete删除数组，其长度会改变吗？</p>\n</li>\n<li>\n<p>js的循环结构有哪些？</p>\n</li>\n<li>\n<p>如何判断两个对象相等？</p>\n</li>\n<li>\n<p>说说你对js对象生命周期的理解</p>\n</li>\n<li>\n<p>Math.ceil()、Math.round()、Math.floor()三者的区别是什么？</p>\n</li>\n<li>\n<p>js的数组/对象在内存中分别是如何存储的？</p>\n</li>\n<li>\n<p>如何判断一个对象是否为空？</p>\n</li>\n<li>\n<p>举例说明数组和对象的迭代方法分别有哪些？</p>\n</li>\n<li>\n<p>说说你对深浅拷贝的理解？并实现一个对数组和对象深拷贝的方法</p>\n</li>\n<li>\n<p>举例说明js如何实现继承？</p>\n</li>\n<li>\n<p>说说你对arguments的理解，它是数组吗？</p>\n</li>\n<li>\n<p>json和对象有什么区别？</p>\n</li>\n<li>\n<p>如何判断对象是否属于某个类？</p>\n</li>\n<li>\n<p>ArrayBuffer和Blob有什么区别？</p>\n</li>\n<li>\n<p>遍历数组和对象的方法都有哪些？</p>\n</li>\n<li>\n<p>举例说明object.freeze有哪些用途呢？</p>\n</li>\n<li>\n<p>原生Math的方法有哪些？请列举并描述其功能</p>\n</li>\n<li>\n<p>写出几种创建对象的方式，并说说他们的区别是什么？</p>\n</li>\n<li>\n<p>深度克隆对象的方法有哪些，并把你认为最好的写出来</p>\n</li>\n<li>\n<p>说说你对js包装对象的理解</p>\n</li>\n<li>\n<p>说说你对base64的理解，它的使用场景有哪些？</p>\n</li>\n<li>\n<p>举例说明atob和btoa的用法</p>\n</li>\n<li>\n<p>简要描述下JS有哪些内置的对象</p>\n</li>\n<li>\n<p>清空一个数组的方式有哪些？它们有什么区别</p>\n</li>\n<li>\n<p>解释下如下代码的意图：Array.prototype.slice.apply(arguments)</p>\n</li>\n<li>\n<p>for in 和 for of 的区别？</p>\n</li>\n<li>\n<p>使用for-in语句能保证遍历对象的顺序吗？如果不能那为什么？如果可以那又如何保证？</p>\n</li>\n<li>\n<p>你知道js的可选链是什么吗？说说你对它的理解，它有什么应用场景？</p>\n</li>\n<li>\n<p>请比较下for、forEach、for of的性能的性能</p>\n</li>\n<li>\n<p>说说js跳出循环return、break、continue的区别？</p>\n</li>\n<li>\n<p>JSON.stringify有什么局限性和哪些技巧？</p>\n</li>\n<li>\n<p>请举例说明JSON.stringify()有哪些特性？</p>\n</li>\n<li>\n<p>请说下你对__proto__和prototype的理解</p>\n</li>\n<li>\n<p>请描述下什么是原型模式？它主要运用在哪些场景？</p>\n</li>\n<li>\n<p>请描述下js的原型和原型链的理解以及它们之间的关系</p>\n</li>\n<li>\n<p>字符串从哪里来的split方法和length属性？</p>\n</li>\n<li>\n<p>new Function有什么应用场景？</p>\n</li>\n<li>\n<p>js怎样避免原型链上的对象共享？</p>\n</li>\n<li>\n<p>原生的字符串操作方法有哪些？请列举并描述其功能</p>\n</li>\n<li>\n<p>字符串相连有哪些方式？哪种最好？为什么？</p>\n</li>\n<li>\n<p>举例说明如何使用WebSQL？</p>\n</li>\n</ul>\n<h3>作用域与上下文</h3>\n<ul>\n<li>什么是词法分析？请描述下js词法分析的过程？</li>\n<li>js的函数有哪几种调用形式？</li>\n<li>说说你对执行上下文的理解</li>\n<li>js函数调用方式有哪些？</li>\n<li>js函数定义方式有哪些？</li>\n<li>在js中函数返回多个值有哪些方法？</li>\n<li>函数声明与函数表达式有什么区别？</li>\n<li>请描述下函数的执行过程</li>\n<li>纯函数和函数式编程有什么关系？</li>\n<li>为什么要用纯函数？</li>\n<li>为什么eval要添加括号呢？</li>\n<li>举例说明constructor和instanceof的区别是什么？</li>\n<li>说下你对柯里化函数(currying)的理解，它有什么运用场景？</li>\n<li>说下你对函数的形参与实参的理解</li>\n<li>js怎么实现一个类并实例化这个类？</li>\n<li>举例说明什么是匿名函数？它有什么优缺点呢？</li>\n<li>请解释下执行栈有哪些特点？</li>\n<li>一个函数调用会产生多少个上下文环境？</li>\n<li>请解释下为什么我们可以在声明函数前使用它？</li>\n<li>说说你对函数是一等公民的理解</li>\n<li>写一个函数时，如果有多个参数，如何传才比较好？</li>\n<li>说说你对javascript的作用域的理解</li>\n<li>闭包是如何形成的？</li>\n<li>请说说你对活动对象的理解</li>\n<li>请说说你对变量对象的理解</li>\n<li>如果给你一段代码，你能画出执行过程的上下文堆栈的变化吗？</li>\n<li>如何激活一个上下文？</li>\n<li>在严格模式下，全局作用域中函数中this的值是什么？</li>\n<li>请说说严格模式下的this指向</li>\n<li>分别解释下js中默认绑定、隐式绑定、显式绑定、new绑定的区别</li>\n<li>请解释下什么是softbind，并实现一个softbind</li>\n<li>js的作用域有哪些？</li>\n<li>解释下什么是暂时性死区？</li>\n<li>class和普通构造函数有什么区别？</li>\n<li>函数的调用栈是怎么工作的？</li>\n<li>请说说JS中的索引数组、关联数组和静态数组、动态数组的定义与区别</li>\n<li>使用js如何创建一个private方法？</li>\n<li>Array(3)和Array(3, 4)的区别是什么？</li>\n<li>js的哪些操作可以改变作用域链？</li>\n<li>解释下隐式全局变量和外部函数作用域</li>\n<li>说说你对JS中暂性死区的理解，它有什么运用场景？</li>\n<li>说说你对作用域链的理解</li>\n<li>举例说明什么是IIFEs？它有什么好处？</li>\n<li>说说你对this的理解？写出4个使用this的典型例子</li>\n<li>说说你对IIFE的理解</li>\n<li>说说你对模块化的理解</li>\n<li>说说你对eval的理解</li>\n<li>什么是闭包？优缺点分别是什么？</li>\n<li>你对new操作符的理解是什么？手动实现一个new方法</li>\n<li>箭头函数的this值继承于哪里</li>\n</ul>\n<h3>冷门</h3>\n<hr>\n<ul>\n<li>简要描述下什么是回调函数并写一个例子出来</li>\n<li>举例说明你对TypedArray的理解，它的运用场景有哪些？</li>\n<li>什么时候在JS中使用Float32Array而不是Array？</li>\n<li>Float32Array有几种构造方式？</li>\n<li>for(;;)循环里如果省略第二个条件，则需要注意什么问题？</li>\n<li>解释下3 + &quot;2&quot; - 5的值为多少？</li>\n<li>null是对象吗？</li>\n<li>请写出几种匿名自执行的写法（至少三种）</li>\n<li>用js写出死循环的方法有哪些？</li>\n<li>分析('b' + 'a' + +'a' + 'a').toLowerCase()返回的结果</li>\n<li>解释下这段代码的意思！：[].forEach.call($$(&quot;<em>&quot;),function(a){ a.style.outline=&quot;1px solid #&quot;+(~~(Math.random()</em>(1<<24))).toString(16) })</li>\n<li>请分析!+[]+!![]+!![]+!![]+!![]+!![]的结果</li>\n<li>请快速答出此题的答案并解释：var x, y = 1; x + y = ?</li>\n<li>准确说出'1,2,3,4'.split()的结果是什么（包括类型和值）？</li>\n<li>请举例说明比较运算符<code>>,>=,<,<=</code>的比较规则</li>\n<li>一道变态题 Number.call.call(Number, undefined, 0) 等于什么？</li>\n<li>请说说IEEE 754规定了哪些标准？</li>\n<li>请说说IEEE 754标准指的是什么？</li>\n<li>typeof('abc')和typeof 'abc'都是string, 那么typeof是操作符还是函数？</li>\n<li>举例说明json的标准格式</li>\n<li>举例说明js立即执行函数的写法有哪些？</li>\n<li>XML与JSON有什么的区别？</li>\n</ul>\n"}}></div>
  }
  