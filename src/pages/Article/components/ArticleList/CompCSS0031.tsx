
  import React,{useEffect} from 'react';
 
  import 'highlight.js/styles/xcode.css';
  const hljs = require('highlight.js');

  export default () => {
    useEffect(()=>{
      document.querySelectorAll('code').forEach(el => {
        el.style.backgroundColor='#f8f8f8';
        el.style.marginBottom='0.1rem';
        hljs.highlightElement(el);
      });
    },[])
    return <div style={{fontSize:'0.26rem'}} dangerouslySetInnerHTML={{__html:"<ul>\n<li>css实现一个扇形</li>\n</ul>\n<pre><code class=\"language-html\"><!DOCTYPE html>\n<html lang=&quot;en&quot;>\n\n<head>\n  <meta charset=&quot;utf-8&quot; />\n  <title>画一个️️扇形</title>\n  <style>\n    * {\n      margin: 0;\n      padding: 0;\n    }\n\n    .sector-wrap {\n      width: 100vw;\n      height: 200px;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n    }\n\n    .sector1 {\n      width: 50px;\n      height: 50px;\n      border-bottom-right-radius: 50px;\n      background-color: #110099;\n    }\n\n    .sector2 {\n      width: 200px;\n      height: 100px;\n    }\n\n    .sector3 {\n      width: 200px;\n      height: 100px;\n    }\n  </style>\n</head>\n\n<body>\n  <section class=&quot;sector-wrap&quot;>\n    <h1>方法一：border-radius</h1>\n    <div class=&quot;sector1&quot;></div>\n  </section>\n  <section class=&quot;sector-wrap&quot;>\n    <h1>方法二：canvas+arc</h1>\n    <canvas id=&quot;sector2&quot; width='200' height='100'></canvas>\n  </section>\n  <section class=&quot;sector-wrap&quot;>\n    <h1>方法三：svg+path</h1>\n    <svg width='200' height='100'>\n      <path xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;#110099&quot; d=&quot;M 50 50 \n      A 50 50 90 0 0 50 -50 \n      L 50 50  \n      Z&quot; />\n    </svg>\n  </section>\n  <script>\n    const drawSector = function () {\n      const ctx = document.querySelector('#sector2').getContext('2d');\n      ctx.moveTo(50, 50);\n      ctx.arc(50, 50, 50, 0, 90 * Math.PI / 180);\n      ctx.lineTo(50, 50);\n      ctx.fillStyle = '#110099';\n      ctx.fill();\n    }\n    drawSector();\n\n  </script>\n</body>\n\n</html>\n</code></pre>\n<ul>\n<li>css实现一个三角形</li>\n</ul>\n<pre><code class=\"language-html\"><!DOCTYPE html>\n<html lang=&quot;en&quot;>\n\n<head>\n  <meta charset=&quot;utf-8&quot; />\n  <title>画一个️️三角形</title>\n  <style>\n    .triangle-sec {\n      width: 100%;\n      height: 80px;\n      display: flex;\n      justify-content: center;\n    }\n\n    .triangle1-wrap {\n      width: 50px;\n      height: 50px;\n      overflow: hidden;\n    }\n\n    .triangle1 {\n      width: 50px;\n      height: 50px;\n      background-color: red;\n      transform: rotateZ(45deg);\n      margin-top: 35px;\n    }\n\n    .triangle2 {\n      width: 0px;\n      height: 0px;\n      border-top: solid 50px blue;\n      border-bottom: solid 50px transparent;\n      border-left: solid 50px transparent;\n      border-right: solid 50px transparent;\n    }\n\n    .triangle3-wrap {\n      width: 100px;\n      height: 100px;\n      position: relative;\n      overflow: hidden;\n    }\n\n    .triangle3 {\n      width: 50px;\n      height: 50px;\n      position: absolute;\n      background-color: teal;\n    }\n\n    .triangle4 {\n      width: 50px;\n    }\n\n    .triangle5 {\n      width: 50px;\n      height: 50px;\n      background-image: linear-gradient(45deg, #fff 50%, #2980B9 0);\n    }\n\n    .triangle6 {\n      width: 50px;\n      height: 50px;\n      position: relative;\n      overflow: hidden;\n    }\n\n    .triangle6:after {\n      content: &quot;&quot;;\n      width: 50px;\n      height: 50px;\n      background-color: brown;\n      transform: rotate(45deg);\n      position: absolute;\n      left: 35px;\n      top: 0px;\n    }\n\n    .triangle7 {\n      width: 50px;\n      height: 50px;\n      background-image: url('https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1602140892677&amp;di=754062cafde7897f9550b7691882b17b&amp;imgtype=0&amp;src=http%3A%2F%2Ftrademark-pics-search.oss-cn-shanghai.aliyuncs.com%2Fsmall%2Ft4517751695000576.jpg');\n      background-size: 100% 100%;\n    }\n\n    .triangle8 {\n      font-size: 50px;\n      color: darkmagenta;\n    }\n  </style>\n</head>\n\n<body>\n  <section class=&quot;triangle-sec&quot;>\n    <h1>方法一: transform rotateZ</h1>\n    <div class='triangle1-wrap'>\n      <div class='triangle1'></div>\n    </div>\n  </section>\n  <section class=&quot;triangle-sec&quot;>\n    <h1>方法二:border</h1>\n    <div class='triangle2'></div>\n  </section>\n  <section class=&quot;triangle-sec&quot;>\n    <h1>方法三:canvas</h1>\n    <canvas id='triangle3' width='50' height='50'></canvas>\n  </section>\n  <section class=&quot;triangle-sec&quot;>\n    <h1>方法四:svg</h1>\n    <svg class=&quot;triangle4&quot;>\n      <path name=&quot;三角形&quot; fill=&quot;green&quot; d=&quot;M50 0 L0 50 L50 50  Z&quot; />\n    </svg>\n  </section>\n  <section class=&quot;triangle-sec&quot;>\n    <h1>方法五:渐变</h1>\n    <div class=&quot;triangle5&quot;></div>\n  </section>\n  <section class=&quot;triangle-sec&quot;>\n    <h1>方法六:伪类</h1>\n    <div class=&quot;triangle6&quot;></div>\n  </section>\n\n  <section class=&quot;triangle-sec&quot;>\n    <h1>方法七:background-image</h1>\n    <div class=&quot;triangle7&quot;></div>\n  </section>\n\n  <section class=&quot;triangle-sec&quot;>\n    <h1>方法八:字体icon</h1>\n    <div class=&quot;triangle8&quot;>▲</div>\n  </section>\n\n  <script>\n    const triangle = document.getElementById('triangle3');\n    const ctx = triangle.getContext('2d');\n    ctx.beginPath();\n    ctx.moveTo(50, 0);\n    ctx.lineTo(0, 50);\n    ctx.lineTo(50, 50);\n    ctx.fillStyle = 'aqua';\n    ctx.fill(); \n  </script>\n</body>\n\n</html>\n</code></pre>\n<ul>\n<li>css实现一个水波纹效果</li>\n</ul>\n<pre><code class=\"language-html\"><!DOCTYPE html>\n<html lang=&quot;en&quot;>\n\n<head>\n  <meta charset=&quot;utf-8&quot; />\n  <title>实现水波纹</title>\n  <style>\n    .wave-wrap {\n      width: 500px;\n      height: 500px;\n      border-radius: 50%;\n      position: relative;\n    }\n\n    .wave {\n      width: 500px;\n      height: 500px;\n      border-radius: 50%;\n      opacity: 0;\n      position: absolute;\n      animation: waveAnim 4s infinite;\n    }\n\n    .w1 {\n      background-color: gold;\n      animation-delay: 0s;\n    }\n\n    .w2 {\n      background-color: green;\n      animation-delay: 1s;\n    }\n\n    .w3 {\n      background-color: red;\n      animation-delay: 2s;\n    }\n\n    .w4 {\n      background-color: blue;\n      animation-delay: 3s;\n    }\n\n    @-webkit-keyframes waveAnim {\n      from {\n        opacity: 1;\n        width: 0;\n        height: 0;\n        top: 50%;\n        left: 50%;\n      }\n\n      to {\n        opacity: 0;\n        width: 100%;\n        height: 100%;\n        top: 0;\n        left: 0;\n      }\n    }\n  </style>\n</head>\n\n<body>\n  <div class='wave-wrap'>\n    <div class='wave w1'></div>\n    <div class='wave w2'></div>\n    <div class='wave w3'></div>\n    <div class='wave w4'></div>\n  </div>\n</body>\n\n</html>\n</code></pre>\n<ul>\n<li>动手实现一个左右固定100px，中间自适应的三列布局？(至少三种)</li>\n</ul>\n<pre><code class=\"language-html\"><html>\n\n<head>\n  <meta charset=&quot;utf-8&quot; />\n  <title>实现三列布局</title>\n  <style>\n    * {\n      margin: 0;\n      padding: 0;\n    }\n\n    .m {\n      width: 100vw;\n      height: 200px;\n    }\n\n    .m1 {\n      display: flex;\n    }\n\n    .m1>.left {\n      width: 100px;\n      height: 100%;\n      background-color: red;\n    }\n\n    .m1>.middle {\n      width: calc(100% - 200px);\n      background-color: green;\n    }\n\n    .m1>.right {\n      width: 100px;\n      height: 100%;\n      background-color: red;\n    }\n\n    .m2 {\n      position: relative;\n      margin-top: 20px;\n    }\n\n    .m2>.left {\n      width: 100px;\n      height: 100%;\n      background-color: red;\n      position: absolute;\n      left: 0;\n      top: 0;\n    }\n\n    .m2>.middle {\n      width: calc(100% - 200px);\n      height: 100%;\n      background-color: green;\n      position: absolute;\n      left: 100px;\n    }\n\n    .m2>.right {\n      width: 100px;\n      height: 100%;\n      background-color: red;\n      position: absolute;\n      right: 0;\n    }\n\n    .m3 {\n      margin-top: 20px;\n    }\n\n    .m3>.left {\n      width: 100px;\n      height: 100%;\n      background-color: red;\n      float: left;\n    }\n\n    .m3>.middle {\n      width: calc(100% - 200px);\n      height: 100%;\n      background-color: green;\n      float: left;\n    }\n\n    .m3>.right {\n      width: 100px;\n      height: 100%;\n      background-color: red;\n      float: left;\n    }\n  </style>\n</head>\n\n<body>\n  <section class='m m1'>\n    <div class='left'></div>\n    <div class='middle'></div>\n    <div class='right'></div>\n  </section>\n\n  <section class='m m2'>\n    <div class='left'></div>\n    <div class='middle'></div>\n    <div class='right'></div>\n  </section>\n  <section class='m m3'>\n    <div class='left'></div>\n    <div class='middle'></div>\n    <div class='right'></div>\n  </section>\n</body>\n\n</html>\n</code></pre>\n<ul>\n<li>屏幕占满和未占满的情况下，使 footer 固定在底部，尽量多种方法</li>\n</ul>\n<pre><code class=\"language-html\"><html>\n\n<head>\n  <style>\n    * {\n      margin: 0;\n      padding: 0;\n    }\n\n    .main {\n      min-height: 100%;\n      padding-bottom: 50px;\n      box-sizing: border-box;\n    }\n\n    .content {\n      width: 100%;\n      height: 500px;\n      background-color: lightblue;\n    }\n\n    footer {\n      width: 100vw;\n      height: 50px;\n      background-color: green;\n      margin-top: -50px;\n    }\n  </style>\n</head>\n\n<body>\n  <div class='main'>\n    <div class='content'></div>\n\n  </div>\n  <footer></footer>\n</body>\n\n</html>\n</code></pre>\n<ul>\n<li>css 实现多列等高布局，要求元素实际占用的高度以多列中较高的为准</li>\n<li>怎样用 css 实现一个弹幕的效果，动手实现一下</li>\n</ul>\n"}}></div>
  }
  