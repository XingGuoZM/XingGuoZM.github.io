
  import React,{useEffect} from 'react';
 
  import 'highlight.js/styles/xcode.css';
  const hljs = require('highlight.js');

  export default () => {
    useEffect(()=>{
      document.querySelectorAll('code').forEach(el => {
        el.style.backgroundColor='#f8f8f8';
        el.style.marginBottom='0.1rem';
        hljs.highlightElement(el);
      });
    },[])
    return <div style={{fontSize:'0.26rem'}} dangerouslySetInnerHTML={{__html:"<h3>经验</h3>\n<ol>\n<li>熟练掌握Javascript，能脱离框架进行原生开发，熟悉Typescript</li>\n<li>熟练使用React框架以及相关生态技术，能独立完成项目的搭建和项目部署</li>\n<li>熟悉浏览器原理以及计算机网络相关技术，在性能优化方面有较多实践经验</li>\n<li>对前端工程化/模块化有一定了解，熟悉webpack、rollup等打包工具及其日常开发配置，有过从0到1的独立搭建项目经验，并优化构建流程</li>\n<li>了解vue框架技术，有相关实践经验</li>\n<li>了解node.js和常用模块，能开发web服务器</li>\n</ol>\n<p>前端单元测试，\n前端集群项目</p>\n<p>请求相关：axios、跨域、jsonp和跨域资源共享,nginx基本配置</p>\n<h3>大流量下前端页面优化</h3>\n<ol>\n<li>服务器瘫痪，前端请求不到数据，对前端页面的容错容灾有更高的要求</li>\n<li>大流量意味着各种终端都可能存在，高中低端机适配，兼容性的要求</li>\n<li>服务器压力大，前端需要做一些措施,前端层面缓解服务器压力的方式有</li>\n</ol>\n<p>请求数量精简（合并）：同类型文件/请求合并，例如请求合并，js、css模块合并，图片雪碧图等方式，合并影响下载速率</p>\n<p>请求大小精简（压缩）：各种资源的压缩，例如js、css、html等文件进行去空格、精简变量名、哈夫曼编码操作，图片可以转换格式和图片压缩算法。压缩影响代码可读性，影响线上问题定位，压缩算法局限性会造成某些平台无法使用，兼容</p>\n<p>缓存，分流请求：http cache、localstorage、离线包等，缓存影响资源时效性</p>\n<p>针对以上优化手段，有利有弊，需要对其进行更细粒度的差异化分解，然后对每个部分使用最优的方式进行处理</p>\n<h3>兼容性</h3>\n<ol>\n<li>js代码的兼容性，例如Object.values的polyfill</li>\n<li>页面在不同设备的适配，例如1px问题、</li>\n<li>客户端时间和服务器时间一致性</li>\n</ol>\n<h3>项目难点（复杂度）</h3>\n<ol>\n<li>问题一 :页面中有一个弹窗，弹窗关闭之后会有一段星星飞入的动画（requestAnimationFrame），当动画结束的时候，更新星星值。有些时候在这个弹窗中点击按钮会跳转到一个新页面（新开一个webview），然而再返回这个页面的时候会发现星星的总数没有变化</li>\n</ol>\n<pre><code>requestAnimationFrame在页面推入后台时会停止\n</code></pre>\n<ol start=\"2\">\n<li>问题二：页面中很多卡片，分布在不同的模块中，每一个卡片有可能有视频或者社交信息（好友情况）也可能两个都有或者都没有。现在我们滚动页面，等我们停止滚动的时候，查找可视区域中的卡片，按照从上往下从左往右的顺序依次进行触发，如果是视频就自动播放，如果是社交信息就进行前后翻转，视频可以循环播放，翻转只翻转一次。</li>\n</ol>\n<pre><code>\n卡片组件 游戏图片+标题+按钮\n\n视频容器+背面社交组件\n\nhoc+forwardRef和useImperativeHandle来做业务管理\n视频自动播放及结束回调（onEnded回调）\n卡片翻转效果及结束回调（transitionend事件监听）\n\n写一个全局行为管理类，滚动监听，动态更新当前可视区域的dom\n</code></pre>\n<ol start=\"3\">\n<li>问题三：时长统计脚本，兼容性、包体积控制、扩展性、安全与作弊。</li>\n</ol>\n<pre><code>玩游戏的时间收集，要求兼容低端机、数据精确、安全、主页面无感知\n每隔3s存一次localStorage累加、每隔15s心跳上报一次，设置一天上限时长\n</code></pre>\n<ol start=\"4\">\n<li>问题四：倒计时准确性与统一性，倒计时误差</li>\n</ol>\n<pre><code>本地时间戳进行计算，倒计时不准\n多个地方使用同一个倒计时组件，接收同一份数据。例如一个红包中有倒计时，等它滚动到不可见时，需要在页面顶部或者右下方展示一个倒计时的组件，这时候特别注意倒计时的统一问题\n</code></pre>\n<ol start=\"5\">\n<li>\n<p>问题五：前端数字累加，数字动画,countup.js</p>\n</li>\n<li>\n<p>问题六：react和rax在渲染过程中又触发了渲染，不会触发useEffect</p>\n</li>\n</ol>\n<pre><code>react中的useEffect：messageChannel\nrax中的useEffect：setTimeout\n</code></pre>\n<ol start=\"7\">\n<li>问题七：rax useEffect不按照顺序执行</li>\n<li>swiper,3d效果在iphone上闪</li>\n<li>模版引擎问题，图片、文案、样式等夹杂展示</li>\n</ol>\n<pre><code>场景：前端需要展示一条文案，但是文案中的有些数值、icon是变化的（需要后端返回），位置、数量和样式不确定。例如\n&quot;可获得✨x200&quot;，200需要红色+加粗，可能还需要特殊字体\n&quot;200x✨可兑换1x🧧&quot;，\n&quot;1x🧧最高可得2元&quot;等等\n\n难点：\n1. 多个图片占位匹配\n2. 样式自定义\n</code></pre>\n<ol start=\"10\">\n<li>弹窗队列问题</li>\n</ol>\n<pre><code>场景：达到拆红包的门槛之后，我们会赠送一堆红包给用户，在页面上就看见一堆红包叠在一起，拆一个红包播放一个炫酷动画，增加余额。\n难点：\n1. 弹窗队列管理问题，\n2. 前端数字相加精度问题\n3. 拆红包的动画流畅度问题\n</code></pre>\n<h3>项目收获和技术迁移</h3>\n<p>性能优化：首屏优化、公共组件\n全面考虑：错误情况、边界情况\n页面兼容：</p>\n<h3>组件封装</h3>\n<ul>\n<li>实现一个自由拖动组件</li>\n<li>实现一个多弹窗管理组件</li>\n<li>实现一个虚拟列表</li>\n</ul>\n<h3>常见面试题</h3>\n<ol>\n<li>重复提交</li>\n<li>请求先后顺序？先请求后响应问题？</li>\n<li>数据解析和页面缓存</li>\n<li>路由懒加载</li>\n<li>前端的存储方案</li>\n<li>断网/弱网处理</li>\n<li>白屏</li>\n<li>组件封装</li>\n<li>数据持久化</li>\n<li>性能优化-图片处理</li>\n<li>命令式弹窗组件</li>\n</ol>\n<pre><code>1. 任意页面函数式调用，全局管理，createRoot创建一个新的root，并用context的provider套一层\n2. 数据传递和弹窗间通信问题，每个弹窗组件使用promise管理，\n3. 弹窗并存和覆盖问题\n4. 弹窗并存：最大数量控制、队列管理和优先级管理\n5. 每一个弹窗生命周期管理\n6. 弹窗管理优化，弹窗节点的复用、\n7. 判断是否遮挡\n</code></pre>\n<ol start=\"12\">\n<li>关于精度问题，数值精度问题和时间精度问题，客户端时间和服务器时间的一致性</li>\n<li>react如何catch错误的（window.addEventListener('error')）</li>\n<li>react重渲染次数的最大值（25次）</li>\n</ol>\n<h3>第三方库</h3>\n<ol>\n<li>轮播，swiper.js</li>\n<li>动画，anime.js、countup.js、lottie-web</li>\n<li>promise，bluebird.js</li>\n<li>组件库，antd</li>\n<li>表格，react-table、rc-table、formik</li>\n<li>状态管理，redux、mobx、rx.js</li>\n<li>类react，preact、inferno、Nerv</li>\n<li>命令弹窗，@ebay/nice-modal-react、</li>\n</ol>\n<h3>前端方向</h3>\n<ol>\n<li>图形、视频编辑器，相关框架PixiJs、ThreeJs、FabricJs</li>\n<li>低代码，相关框架LowercodeEngine</li>\n<li>微前端，相关框架qiankun</li>\n</ol>\n"}}></div>
  }
  