
  import React,{useEffect} from 'react';
 
  import 'highlight.js/styles/xcode.css';
  const hljs = require('highlight.js');

  export default () => {
    useEffect(()=>{
      document.querySelectorAll('code').forEach(el => {
        el.style.backgroundColor='#f8f8f8';
        el.style.marginBottom='0.1rem';
        hljs.highlightElement(el);
      });
    },[])
    return <div style={{fontSize:'0.26rem'}} dangerouslySetInnerHTML={{__html:"<h2>字符串</h2>\n<ul>\n<li>写一个函数，去除字符串中的空格</li>\n</ul>\n<pre><code class=\"language-js\">// 方法一\nconst replaceEmpty = (str) => {\n  return str.replace(/ /g, '');\n}\n</code></pre>\n<ul>\n<li>写一个函数，在给定一个url字符串获取参数的方法</li>\n</ul>\n<pre><code class=\"language-js\">const getUrlParams = (str) => {\n\n  const paramArr = str.split('?')[1].split('&amp;');\n  const obj = {};\n  for (const item of paramArr) {\n    const arr = item.split('=');\n    if (!arr[1]) {\n      obj[arr[0]] = true;\n    } else {\n      obj[arr[0]] = arr[1];\n    }\n  }\n  return obj;\n}\n\nconsole.log(getUrlParams('https://baidu.com?a=1&amp;b=undefined&amp;c'))\n</code></pre>\n<ul>\n<li>写一个函数，判断是否回文</li>\n</ul>\n<pre><code class=\"language-js\">const isPalindrome = (str) => {\n  let left = 0, right = str.length - 1;\n  while (left < right) {\n    if (str[left] === str[right]) {\n      left++;\n      right--;\n    } else {\n      return false;\n    }\n  }\n  return true;\n}\n\nconsole.log(isPalindrome('abd ba'))\n</code></pre>\n<ul>\n<li>写一个函数，实现字符串的反转</li>\n</ul>\n<pre><code class=\"language-js\">// 方法一\nconst strReverse1 = (str) => {\n  return str.split('').reverse().join('');\n}\n// 方法二\nconst strReverse2 = (str) => {\n  let result = '';\n\n  for (let i = str.length - 1; i >= 0; i--) {\n    result += str[i];\n  }\n  return result;\n}\n</code></pre>\n<ul>\n<li>写一个函数，实现两个大数相加</li>\n</ul>\n<pre><code class=\"language-js\">const sum = (a, b) => {\n  const len = Math.max(a.length, b.length);\n  a = a.padStart(len, '0')\n  b = b.padStart(len, '0')\n  let curry = 0;\n  let result = ''\n  for (let i = len - 1; i >= 0; i--) {\n    const sum = +a[i] + +b[i] + curry;\n\n    result = sum % 9 + result;\n    curry = Math.floor(sum / 9);\n  }\n  return curry ? curry + result : result;\n}\n//测试\nconsole.log(sum('123456789099888','111111111111111111111111111111111111'));\n</code></pre>\n<ul>\n<li>写一个函数，判断一个字符串是否为另一个字符串的子串</li>\n</ul>\n<pre><code class=\"language-js\">// 方式一\nconst isSubStr1 = (str1, str2) => {\n  const longStr = str1.length > str2.length ? str1 : str2;\n  const shortStr = str1.length < str2.length ? str1 : str2;\n\n  return longStr.indexOf(shortStr) > -1 ? true : false;\n}\n// 方式二\nconst isSubStr2 = (str1, str2) => {\n  const longStr = str1.length > str2.length ? str1 : str2;\n  const shortStr = str1.length < str2.length ? str1 : str2;\n\n  for (let i = 0; i < longStr.length - shortStr.length; i++) {\n    const s = longStr.slice(i, shortStr.length);\n    if (s === shortStr) {\n      return true;\n    }\n  }\n  return false;\n}\n// 方式三\nconst isSubStr3 = (str1, str2) => {\n  return str1.includes(str2) || str2.includes(str1);\n}\n</code></pre>\n<ul>\n<li>写一个函数，计算两个字符串的公共子串</li>\n</ul>\n<pre><code></code></pre>\n<ul>\n<li>写一个函数，实现字符串数字的格式化，例如100000->100,000</li>\n</ul>\n<pre><code class=\"language-js\">// 方式一：正则\nconst formatNumStr = (numStr) => {\n  return numStr.replace(/(?=\\B(\\d{3})+$)/g, ',')\n}\n\nconsole.log(formatNumStr('100000000'))\n</code></pre>\n<ul>\n<li>写一个函数，实现颜色转换 'rgb(255, 255, 255)' -> '#FFFFFF' 的多种思路</li>\n</ul>\n<pre><code class=\"language-js\">const rgb2hex=(rgb)=>{\n  const rgbList = rgb.match(/\\d+/g);\n  const hex = (n) => {\n    return (&quot;0&quot; + Number(n).toString(16)).slice(-2);\n  }\n  return rgbList.reduce((pre,cur)=>pre+hex(cur),'#').toUpperCase()\n}\n\n//测试\nconsole.log(rgb2hex('rgb(255,255,255)'));\n</code></pre>\n<ul>\n<li>写一个函数，实现颜色转换 '#FFFFFF' -> 'rgb(255, 255, 255)' 的多种思路</li>\n</ul>\n<pre><code class=\"language-js\">const hex2rgb=(hex)=>{\n  const ret = [];\n  for(let i=1;i<hex.length;i+=2){\n    const str = '0x'+String(hex[i])+String(hex[i+1]);\n    ret.push(parseInt(str));\n  }\n  return 'rgb('+ret.join(',')+')';\n}\n//测试\nconsole.log(hex2rgb('#000000'));\n</code></pre>\n<ul>\n<li>实现normalize函数，能将输入的特定的字符串转化为特定的结构化数据，字符串仅由小写字母和 [] 组成，且字符串不会包含多余的空格。示例一: 'abc' --> {value: 'abc'}。示例二：'[abc[bcd[def]]]' --> {value: 'abc', children: {value: 'bcd', children: {value: 'def'}}}</li>\n</ul>\n<ul>\n<li>给定特定的字符串，写个方法判断是否以元字母结尾</li>\n<li>写一个方法找出一段话里面出现频率最多的词</li>\n<li>写一个密码生成器，并同时写一个密码强度校验的方法</li>\n<li>使用js实现摩斯密码的加密和解密</li>\n<li>写一个汉字与Unicode码的互转的方法</li>\n<li>使用js写一个计算字符串的字节数的方法</li>\n<li>什么是UUID？它有什么作用？用js写一个生成UUID的方法</li>\n<li>用js实现小写金额转大写的方法</li>\n<li>写一个方法，将字符串中的单词倒转后输出，如：<code>my love</code> -> <code>ym evol</code></li>\n</ul>\n<pre><code class=\"language-js\">const reverseWords = (str) => {\n  return str.split(' ').map(item => {\n    return item.split('').reverse().join('')\n  }).join(' ');;\n}\n// 测试\nconst str = 'my love';\nconsole.log(reverseWords(str));\n</code></pre>\n<ul>\n<li>使用正则去掉html中标签与标签之间的空格</li>\n<li>写一个把数字转成中文的方法，例如：101转成一百零一</li>\n<li>写一个方法判断给定的字符串是否同态(isomorphic)</li>\n<li>写一个方法，当给定数字位数不足8位时，则在左边补充0以补足8位数的方法</li>\n<li>对a == ('1'||'2'||'3') ? false : true写法进行改进，写出你优化后的方法</li>\n<li>手写一个trim()的方法</li>\n<li>写一个方法，实时验证input输入的值是否满足金额如：3.56(最多只有两位小数且只能数字和小数点)的格式，其它特殊字符禁止输入</li>\n<li>写一个方法把科学计数法转换成数字或者字符串</li>\n<li>请实现一个计算器的功能</li>\n<li>请使用原生的js实现斐波那契数列</li>\n<li>写一个任意进制转换的程序</li>\n<li>写一个方法判断一个数字是否为整数</li>\n<li>用js实现一个加法的方法</li>\n<li>如何判断一个元素文本是否换行？</li>\n<li>不用 + eval Function 实现加法</li>\n<li>使用js写一个方法生成0000-9999一万个数字（4位数）</li>\n<li>随机生成一个指定长度的验证码</li>\n<li>使用js写方法把0123456789生成每组4个数，共有多少个组合和多少个排列？</li>\n<li>写一个方法，计算有N个数（可重复），分别放到M个位置中，有多少种排列？</li>\n<li>输入一个四则混合运算的表达式，请写个方法求它的值</li>\n<li>写一个ASCII与Unicode码的互转的方法</li>\n<li>使用js写一个方法将数字转换为float,并取N位小数</li>\n<li>写一个方法求给定1485个元素中取33个元素的组合有多少种（大数据处理，小心CPU爆炸）</li>\n<li>写一个方法将字符串中的制表符全部替换为逗号</li>\n<li>写一个方法将汉字转换成拼音首字母</li>\n<li>使用递归实现指定最小值和最大值之间的所有整数求和</li>\n<li>使用js写一个羽毛球16个队抽签随机队伍编号的方法</li>\n<li>写一个方法实现指定开始的数字增加到指定的结束数字，步长默认为1</li>\n<li>写个方法将base64的数据流装换为二进制流</li>\n<li>写一个方法将ArrayBuffer转为字符串</li>\n<li>写一个方法将一个html字符串变成JSON树的形式</li>\n<li>写一个方法生成不重复的用户ID</li>\n<li>请使用js实现一个无限累加的函数</li>\n<li>请使用js写个方法解析emoji表情</li>\n<li>写个方法找出页面中除了数字和英文字母外的所有特殊特号</li>\n<li>写个方法，找出指定字符串中重复最多的字符及其长度</li>\n</ul>\n<pre><code class=\"language-js\">function getMaxChar (str) {\n  const obj = {}\n  for (let i = 0; i < str.length; i++) {\n    if (obj[str[i]]) {\n      obj[str[i]] += 1\n    } else {\n      obj[str[i]] = 1;\n    }\n  }\n  let maxChar = [], maxCount = -1\n  for (let char in obj) {\n    if (!obj.hasOwnProperty(char)) {\n      continue;\n    }\n    if (obj[char] === maxCount) {\n      maxChar.push(char);\n    } else if (obj[char] > maxCount) {\n      maxChar = [char];\n      maxCount = obj[char];\n    }\n  }\n  return { maxChar, maxCount };\n}\n// 测试\nconst str = 'abbc';\nconst { maxChar, maxCount } = getMaxChar(str);\nconsole.log(maxChar, maxCount);\n</code></pre>\n<ul>\n<li>\n<p>分别封装精确运算的加减乘除四个方法</p>\n</li>\n<li>\n<p>用js实现一个九九乘法口诀表</p>\n</li>\n<li>\n<p>写一个方法随机生成指定位数的字符串</p>\n</li>\n<li>\n<p>写一个字符串重复的repeat函数，例如repeat('abc',4) // abcabcabcabc</p>\n</li>\n</ul>\n<pre><code class=\"language-js\">// 方法一：new Array + join\nconst repeat = (str, count) => {\n  return (new Array(count + 1)).join(str)\n}\n//方法二:递归\nconst repeat = (str, count) => {\n  return count > 0 ? str.concat(repeat(str, --count)) : ''\n}\n// 方法三：循环\n\n//测试\nconst str = 'abc';\nconst count = 5;\nconsole.log(repeat(str, count))\n</code></pre>\n<ul>\n<li>写一个格式化金额的方法</li>\n<li>写一个使两个整数进行交换的方法（不能使用临时变量）</li>\n<li>请写出一个函数求出N的阶乘（即N!）</li>\n</ul>\n<pre><code class=\"language-js\">// 递归\nfunction factorialByRecursion (n) {\n  if (n === 1) return n;\n  return n * factorial(n - 1)\n}\n//循环\nfunction factorialByLoop (n) {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum *= i;\n  }\n  return sum;\n}\n// 测试\nconsole.log(factorialByLoop(10))\n</code></pre>\n<ul>\n<li>找到字符串中最长的单词，并返回它的长度</li>\n</ul>\n<pre><code class=\"language-js\">function getMaxStr (str) {\n  const arr = str.split(' ');\n  return arr.map(item => item.length).reduce((val, cur) => val > cur ? val : cur);\n}\n\nconst str = 'my name is jason'\nconsole.log(getMaxStr(str));\n</code></pre>\n<ul>\n<li>写一个方法判断字符串是否为回文字符串</li>\n<li>写一个方法把0和1互转（0置1，1置0）</li>\n<li>实现一个isNaN的方法</li>\n<li>写一个方法验证是否为中文</li>\n<li>写一个验证身份证号的方法</li>\n<li>写一个判断数据类型的方法</li>\n</ul>\n<pre><code class=\"language-js\">function getType (val) {\n  const typeStr = Object.prototype.toString.call(val);\n  return typeStr.replace(/\\[object |]/g, '')\n}\n//测试\nconsole.log(getType('hello'))\n</code></pre>\n<ul>\n<li>\n<p>写一个加密字符串的方法</p>\n</li>\n<li>\n<p>统计某一字符或字符串在另一个字符串中出现的次数</p>\n</li>\n<li>\n<p>写一个去除制表符和换行符的方法</p>\n</li>\n<li>\n<p>写一个把字符串大小写切换的方法</p>\n</li>\n<li>\n<p>写一个方法把下划线命名转成大驼峰命名</p>\n</li>\n<li>\n<p>去除字符串中最后一个指定的字符</p>\n</li>\n<li>\n<p>写一个方法去掉字符串中的空格</p>\n</li>\n<li>\n<p>写一个方法检测页面中的所有标签是否正确闭合</p>\n</li>\n<li>\n<p>实现一个函数将中文数字转成数字</p>\n</li>\n<li>\n<p>将 153812.7 转化为 153,812.7</p>\n</li>\n<li>\n<p>实现格式化输出，比如输入 999999999，输出 999,999,999</p>\n</li>\n<li>\n<p>如何识别出字符串中的回车并进行换行？</p>\n</li>\n</ul>\n"}}></div>
  }
  