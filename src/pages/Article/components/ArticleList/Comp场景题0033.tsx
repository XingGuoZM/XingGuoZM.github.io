
  import React,{useEffect} from 'react';
 
  import 'highlight.js/styles/xcode.css';
  const hljs = require('highlight.js');

  export default () => {
    useEffect(()=>{
      document.querySelectorAll('code').forEach(el => {
        el.style.backgroundColor='#f8f8f8';
        el.style.marginBottom='0.1rem';
        hljs.highlightElement(el);
      });
    },[])
    return <div style={{fontSize:'0.26rem'}} dangerouslySetInnerHTML={{__html:"<ul>\n<li>实现一个函数arrange函数，使得支持以下功能</li>\n</ul>\n<pre><code class=\"language-js\">// 实现该函数\nfunction arrange(name){}\n\narrange('william').execute();\n// > william is notified\n\narrage('william').do('commit').execute();\n// > william is notified\n// > Start to commit\n\narrage('william').wait(5).do('commit').execute();\n// > william is notified\n// 等待5s\n// > Start to commit\n\narrage('william').waitFirst(5).do('push').execute();\n// 等待5s\n// > william is notified\n// > Start to push\n</code></pre>\n<p>题解</p>\n<pre><code class=\"language-js\">\nfunction arrange (name) {\n  const task = [];\n  task.push(() => {\n    console.log(name + ' is notified');\n  });\n  function doSomething (name) {\n    task.push(() => {\n      console.log('Start to ' + name);\n    })\n    return this;\n  }\n  function wait (s) {\n    task.push(async () => new Promise(resolve => {\n      setTimeout(resolve, s * 1000)\n    }))\n    return this;\n  }\n  function waitFirst (s) {\n    task.unshift(async () => new Promise(resolve => {\n      setTimeout(resolve, s * 1000)\n    }))\n    return this;\n  }\n  async function execute () {\n    for (const t of task) {\n      await t();\n    }\n  }\n\n  return {\n    do: doSomething,\n    wait,\n    waitFirst,\n    execute,\n  }\n}\n</code></pre>\n<ul>\n<li>给fetch添加超时功能</li>\n</ul>\n<pre><code class=\"language-js\">function timeoutFetch (timeout = 10000) {\n  return function (url, options) {\n    return new Promise((resolve, reject) => {\n      const signalController = new AbortController()\n      fetch(url, {\n        ...options,\n        signal: signalController.signal\n      }).then(resolve, reject);\n      setTimeout(() => {\n        reject(new Error('Fetch timeout'))\n        // 取消请求\n        signalController.abort();\n      }, timeout);\n    })\n  }\n}\n// 测试\nconst request = timeoutFetch(3000)\n</code></pre>\n<ul>\n<li>实现任务队列的中断和恢复,支持以下功能</li>\n</ul>\n<pre><code>1. 依次顺序执行一系列任务\n2. 所有任务完成后可以得到每个任务的执行结果\n3. 需要返回两个方法，start用于启动任务，pause用于暂停任务\n4. 每个任务具有原子性，即不可中断，只能在两个任务之间中断\n</code></pre>\n<ul>\n<li>请编写一个对象obj满足 obj=='a' &amp;&amp; obj=='b' &amp;&amp; obj=='c'</li>\n<li>如何让(a==1 &amp;&amp; a==2 &amp;&amp; a==3)的值为true？把&quot;==&quot;换成&quot;===&quot;后还能为true吗？</li>\n</ul>\n<pre><code class=\"language-js\">// 方法一\nvar i = 0;\nNumber.prototype.valueOf = function () {\n  return ++i;\n}\nvar a = new Number(i);\n\n// 方法二\nconst a = {\n  valueOf: (function () {\n    var i = 0;\n    return () => ++i;\n  }())\n}\n// 方法三\nlet i = 0;\nObject.defineProperty(globalThis, 'a', {\n  get () {\n    return ++i;\n  }\n})\n// 测试\nconsole.log(a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3);\n</code></pre>\n<ul>\n<li>值和引用，输出结果</li>\n</ul>\n<pre><code class=\"language-js\">var foo = { bar:1};\nvar arr1 = {1,2,foo};\nvar arr2 = arr1.slice(1);\narr2[0]++;\narr2[1].bar++;\nfoo.bar++;\narr1[2].bar++;\nconsole.log(arr1[1] === arr2[0]);\nconsole.log(arr1[2] === arr2[1]);\nconsole.log(foo.bar);\n</code></pre>\n<ul>\n<li>请用js编写一个红绿灯程序</li>\n<li>请用js实现一个简单的小区楼的电梯运行程序</li>\n<li>用js模拟实现微信抢红包的算法，并说明你的思路</li>\n<li>用函数实现扑克牌排序</li>\n<li>实现一个ajax的队列请求</li>\n<li>请使用js实现vue的diff算法</li>\n<li>说下你对map方法的理解，并解释下面代码返回的结果</li>\n</ul>\n<pre><code class=\"language-js\">const result = new Array(3).map((item) => {\n  return item = {\n    name: 'test'\n  }\n});\nconsole.log(result);\n</code></pre>\n<ul>\n<li>请解释以下题目会输出的结果（类型转换）</li>\n</ul>\n<pre><code class=\"language-js\">var temp = [0];\nif ([0]) {\n  console.log(temp == true);\n} else {\n  console.log(&quot;测试&quot;);\n}\n\n</code></pre>\n<ul>\n<li>请解释下面题目输出的结果</li>\n</ul>\n<pre><code class=\"language-js\">var val = &quot;test&quot;;\nconsole.log(&quot;output is &quot; + (val === &quot;Test&quot;) ? &quot;123&quot; : &quot;456&quot;);\n\n</code></pre>\n<ul>\n<li>以下方法调用call输出的结果是什么？请解释下？</li>\n</ul>\n<pre><code class=\"language-js\">[].copyWithin.call({ length: 5, 3: 1 }, 0, 3)\n</code></pre>\n<ul>\n<li>请解释下为什么下面第一种方式会报错而第二种不会？</li>\n</ul>\n<pre><code class=\"language-js\">// 第一种：构造函数创建\nvar object=new Object();\nobject.a=1;\nobject.8=8; //Unexpected number\n\n// 第二种：字面量创建\nvar object = {\n  a: 1,\n  8: 2\n};\n\n</code></pre>\n<ul>\n<li>给定下面伪代码，请说出程序运行多少秒后会输出“Hello World!”（不考虑其它干扰因素）？并解释下为什么？</li>\n</ul>\n<pre><code class=\"language-js\">sleep(1秒) //运行1s\n\nsetTimout(function(){\n    输出 &quot;Hello World!&quot;\n}, 7秒)\n\nsleep(3秒) //运行3s\n\n</code></pre>\n<ul>\n<li>解释如下代码的输出结果，并改造代码使得按顺序输出i</li>\n</ul>\n<pre><code class=\"language-js\">function test(){\n\tfor(let i = 0; i < 8; i++){\n\t\t(\n\t\t\tfunction(j){\n\t\t\t\tsetTimeout(function(){\n\t\t\t\t\tconsole.log(&quot;i=&quot;, i);\n\t\t\t\t}, Math.random() * 1000);\n\t\t\t}(i)\n\t\t)\n\t}\n}\n\ntest();\n\n</code></pre>\n<ul>\n<li>写一个方法计算N年时农场里有几只羊（见下文描述）？</li>\n</ul>\n<pre><code>农场买了一只小羊，这种羊在第一年是小羊，第二年的年底会生一只小羊，第三年不生小羊，第四年的年底还会再生下一只小羊，第五年就死掉了。\n</code></pre>\n<ul>\n<li>用js写个算法算出筐里最少有多少个鸡蛋？</li>\n</ul>\n<pre><code>一筐鸡蛋：\n1个1个拿，正好拿完；\n2个2个拿，还剩1个；\n3个3个拿，正好拿完；\n4个4个拿，还剩1个；\n5个5个拿，还差1个；\n6个6个拿，还剩3个；\n7个7个拿，正好拿完；\n8个8个拿，还剩1个；\n9个9个拿，正好拿完。\n\n问筐里最少有多少鸡蛋？\n</code></pre>\n<ul>\n<li>实现一个函数sum, 满足以下需求:</li>\n</ul>\n<pre><code class=\"language-js\">sum() == 0\nsum(1)(2)(3)() == 6\nsum(3)(4)() == 7\nsum(v1)(v2)...(vn)() == v1+v2+...+vn\n</code></pre>\n<ul>\n<li>请说说以下两种原型的区别</li>\n</ul>\n<pre><code class=\"language-js\">var A = function() {};\nvar b = new A();\nA.prototype = {\n\tn: 0,\n\tm: 1\n}\n和以下方式的声明有什么区别，为什么？\n\nvar A = function() {};\nvar b = new A();\nA.prototype.n = 0;\nA.prototype.m = 1;\n\n</code></pre>\n<ul>\n<li>下文Promise的执行顺序是怎样的？</li>\n</ul>\n<pre><code class=\"language-js\">new Promise((resolve,reject)=>{\n    console.log(&quot;1&quot;)\n    resolve()\n}).then(()=>{\n    console.log(&quot;2&quot;)\n    new Promise((resolve,reject)=>{\n        console.log(&quot;3&quot;)\n        resolve()\n    }).then(()=>{\n        console.log(&quot;4&quot;)\n    }).then(()=>{\n        console.log(&quot;5&quot;)\n    }).then(()=>{\n        console.log(&quot;6&quot;)\n    }).then(()=>{\n        console.log(&quot;7&quot;)\n    })\n}).then(()=>{\n    console.log(&quot;8&quot;)\n    Promise.resolve().then(()=>{\n        console.log(9)\n    }).then(()=>{\n        console.log(10)\n    })\n}).then(()=>{\n    console.log(&quot;11&quot;)\n}).then(()=>{\n    console.log(&quot;12&quot;)\n})\n</code></pre>\n<ul>\n<li>判断instanceof的结果并解释原因 [代码]</li>\n</ul>\n<pre><code class=\"language-js\">function test(){ \n    return test; \n} \nnew test() instanceof test;\n</code></pre>\n<ul>\n<li>看下面代码，判断a和b的类型是否为true？为什么？什么是基本包装类型?</li>\n</ul>\n<pre><code class=\"language-js\">var a=1;\nvar b = new Number(1);\ntypeof(a)===typeof(b);\n</code></pre>\n<ul>\n<li>请解释下如下js代码对数组排序后的输出结果</li>\n</ul>\n<pre><code class=\"language-js\">var result = [55, 22, 168]; \nconsole.log(result.sort());\n\n</code></pre>\n<ul>\n<li>用不同的方法改装下面的代码，使它的结果输出为0-4[代码]</li>\n</ul>\n<pre><code class=\"language-js\">for (var i = 0; i < 5; i++){\n    setTimeout(() => {\n        console.log(i);\n    }, 1000)\n}\n</code></pre>\n<ul>\n<li>根据下面代码：说出执行结果，并解释为何是会是这样的结果？</li>\n</ul>\n<pre><code class=\"language-js\">var str = 'abc';\nconsole.log(str[1]);\n\nvar num = 123;\nconsole.log(num[1]);\n</code></pre>\n<ul>\n<li>这两种展开运算符的方式有什么区别呢？</li>\n</ul>\n<pre><code class=\"language-js\">const o1 = { ...obj, o3 }\n\nconst o2 = { ...obj, o3: { ...o3 } }\n\n</code></pre>\n<ul>\n<li>阅读下面关于setTimeout和Promise的代码，判断结果会输出什么？为什么？</li>\n</ul>\n<pre><code class=\"language-js\">setTimeout(function () {\n    console.log(1);\n})\nPromise.resolve(function () {\n    console.log(2)\n})\nnew Promise(function (resolve) {\n    console.log(3);\n    resolve();\n}).then(function () {\n    console.log(4)\n})\nconsole.log(5)\n</code></pre>\n<ul>\n<li>\n<p>用js写一个事件侦听器的方法</p>\n</li>\n<li>\n<p>写一个根据xpath获取元素的方法</p>\n</li>\n<li>\n<p>写一个方法探测CPU占比情况?</p>\n</li>\n<li>\n<p>获取浏览器当前页面的滚动条高度的兼容写法</p>\n</li>\n<li>\n<p>写一个方法实现选中复制的功能</p>\n</li>\n<li>\n<p>写一个方法，实现修改当前的URL链接但页面不跳转的功能</p>\n</li>\n<li>\n<p>写一个代理console.log的方法</p>\n</li>\n<li>\n<p>写个方法，实现对某个节点的拖拽</p>\n</li>\n<li>\n<p>用js实现动态改变根元素字体大小的方法</p>\n</li>\n<li>\n<p>你知道断点续传的原理吗？用js怎么实现</p>\n</li>\n<li>\n<p>用js实现一个复制粘贴</p>\n</li>\n<li>\n<p>写一个方法，实现使用canvas播放视频？</p>\n</li>\n<li>\n<p>js如何检测当前页面是否以全屏模式显示？</p>\n</li>\n<li>\n<p>写一个让一句话随着鼠标移动的小插件</p>\n</li>\n<li>\n<p>用js实现一个导航吸顶效</p>\n</li>\n<li>\n<p>js如何把网页加入收藏夹</p>\n</li>\n<li>\n<p>如何用js获取DOM元素在页面中的绝对位置？</p>\n</li>\n<li>\n<p>写一个方法获取div的宽高</p>\n</li>\n<li>\n<p>写一个方法来获取div到浏览器窗口的高度</p>\n</li>\n<li>\n<p>如何禁止IOS移动端网页橡皮筋的效果？</p>\n</li>\n<li>\n<p>如何实现一个全屏的功能？</p>\n</li>\n<li>\n<p>如何实现文件拖动上传？</p>\n</li>\n<li>\n<p>写个方法判断当前脚本运行在浏览器还是node环境中</p>\n</li>\n<li>\n<p>用js写一个绑定事件检测窗口大小</p>\n</li>\n<li>\n<p>用js怎么实现图片马赛克效果？</p>\n</li>\n<li>\n<p>写个给图片加水印的方法</p>\n</li>\n<li>\n<p>怎么下载一个zip文件？</p>\n</li>\n<li>\n<p>写一个方法监听某个div滚动</p>\n</li>\n<li>\n<p>用代码实现游戏应用中连续按键触发必杀技的监测方法</p>\n</li>\n<li>\n<p>用js实现最大化和最小化窗口</p>\n</li>\n<li>\n<p>怎样在JavaScript中创建一个worker线程？</p>\n</li>\n<li>\n<p>请使用js实现一个省市县级联的效果</p>\n</li>\n<li>\n<p>用js实现一个轮播图，并简述有哪些实现的方法</p>\n</li>\n<li>\n<p>请使用纯js实现一个横向或纵向的无缝滚动效果</p>\n</li>\n<li>\n<p>用原生js实现类似getElementsByClassName的方法，不能使用querySelectorAll</p>\n</li>\n<li>\n<p>写一个网络不通时则提醒用户的方法</p>\n</li>\n<li>\n<p>用js封装一个对cookie操作的方法</p>\n</li>\n<li>\n<p>如何使用js获取当前的url和来源的url？</p>\n</li>\n<li>\n<p>写一个方法将html页面生成为图片</p>\n</li>\n<li>\n<p>写个方法获取浏览器的唯一标识</p>\n</li>\n<li>\n<p>使用js写一个方法操作css变量</p>\n</li>\n<li>\n<p>写一个方法动态同步加载script文件</p>\n</li>\n<li>\n<p>写一个方法监听指定cookie的变化</p>\n</li>\n<li>\n<p>使用JavaScript拖拽盒子跟着鼠标动的效果</p>\n</li>\n<li>\n<p>写一个方法判断页面滚动方向</p>\n</li>\n<li>\n<p>使用js写一个图片压缩的小工具</p>\n</li>\n<li>\n<p>写一个方法监听DOM宽高的变化</p>\n</li>\n<li>\n<p>使用canvas画一个小球自由落体的效果</p>\n</li>\n<li>\n<p>写一个方法获取手机电池的信息，如：电量、充电状态等</p>\n</li>\n<li>\n<p>使用js动态创建一个有不少于10万个节点的树</p>\n</li>\n<li>\n<p>给你一个页面，找出该页面使用最多的前三个标签以及他们的数量</p>\n</li>\n<li>\n<p>写一个判断设备来源的方法</p>\n</li>\n<li>\n<p>写一个方法获取图片的原始宽高</p>\n</li>\n<li>\n<p>请手写一个幻灯片的效果</p>\n</li>\n<li>\n<p>请用canvas写一个关于520浪漫表白的代码</p>\n</li>\n<li>\n<p>写一个获取当前url查询字符串中的参数的方法</p>\n</li>\n<li>\n<p>写一个JS方法，判断元素是否在可视区域</p>\n</li>\n<li>\n<p>写一个方法将虚拟DOM转化为真实DOM？</p>\n</li>\n<li>\n<p>写一个方法将真实DOM转化为虚拟DOM？</p>\n</li>\n<li>\n<p>写一个方法获取指定窗口的尺寸大小</p>\n</li>\n<li>\n<p>写一个方法获取滚动条距离窗口顶部的距离</p>\n</li>\n<li>\n<p>写一个js方法，输入指定类型的选择器(id，class，tagName)可以返回匹配的DOM节，要求兼容和性能</p>\n</li>\n<li>\n<p>使用js写一个多文件上传的组件</p>\n</li>\n<li>\n<p>使用js写一个批量上传文件的组件</p>\n</li>\n<li>\n<p>写一个方法，当复制页面中的内容时，同时把版权信息也复制上</p>\n</li>\n<li>\n<p>实现多张图片合成一张的效果</p>\n</li>\n<li>\n<p>写个方法获取屏幕的DPI</p>\n</li>\n<li>\n<p>使用js实现一个图片剪裁的功能</p>\n</li>\n<li>\n<p>写一个获取页面中所有checkbox的方法</p>\n</li>\n<li>\n<p>用js写一个方法检测浏览器是否支持css3的属性</p>\n</li>\n<li>\n<p>写一个方法获取图片的方向</p>\n</li>\n<li>\n<p>写一个方法获取图片的exif信息</p>\n</li>\n<li>\n<p>写一个方法实现自定义右键菜单的功能</p>\n</li>\n<li>\n<p>写一个获取非行间样式的方法</p>\n</li>\n<li>\n<p>写一个方法粘贴复制的图片并显示出来</p>\n</li>\n<li>\n<p>使用js获取鼠标坐标</p>\n</li>\n<li>\n<p>js如何实现打印指定的区域（局部打印）？</p>\n</li>\n<li>\n<p>举例说明js如何拖拽排序？</p>\n</li>\n<li>\n<p>用原生JS封装插件的方式有哪些？</p>\n</li>\n</ul>\n<pre><code class=\"language-js\">;(function (global) { \n  &quot;use strict&quot;;\n  function MyPlugin(el, options) {\n    //some cod\n  };\n  MyPlugin.prototype = {\n    //定义方法\n    show: function () {\n      //some code\n    }\n };\n  if (typeof module !== 'undefined' &amp;&amp; module.exports) {    //兼容CommonJs规范 \n    module.exports = MyPlugin;\n  } else if (typeof define === 'function') {   //兼容AMD/CMD规范\n    define(function () {\n      return MyPlugin\n    })\n  } else {    //注册全局变量，兼容直接使用script标签引入插件\n    global.MyPlugin = MyPlugin;\n  }\n})(this);\n</code></pre>\n<h3>请实现如下的函数</h3>\n<pre><code class=\"language-js\">/*\n\t可以批量请求数据，所有的 URL 地址在 urls 参数中，同时可以通过 max 参数控制请求的并发度，当所有请求结束之后，需要执行 callback 回调函数。发请求的函数可以直接使用 fetch 即可\n*/\n</code></pre>\n<h3>按要求实现一个 sum 函数</h3>\n<pre><code class=\"language-js\">const a = sum(); // => a === 0\nconst b = sum(); // => b === 2\nconst c = sum(4)(5); // c === 9\nconst k = sum(n1)...(nk) // k === n1 + n2 + ... + nk\n</code></pre>\n<h3>已知函数 A，要求构造⼀个函数 B 继承 A（<a href=\"https://github.com/lgwebdream/FE-Interview/issues/333\">答案&amp;解析</a>）</h3>\n<pre><code class=\"language-js\">function A(name) {\n  this.name = name;\n}\nA.prototype.getName = function () {\n  console.log(this.name);\n};\n</code></pre>\n<h3>要求⽤不同⽅式对 A 进⾏改造实现 A.name 发⽣变化时⽴即执⾏ A.getName（<a href=\"https://github.com/lgwebdream/FE-Interview/issues/329\">答案&amp;解析</a>）</h3>\n<pre><code class=\"language-js\">/*\n\t已知对象A = {name: 'sfd', getName: function(){console.log(this.name)}},\n\t现要求⽤不同⽅式对A进⾏改造实现A.name发⽣变化时⽴即执⾏A.getName\n*/\n</code></pre>\n<h3>修改以下代码，使得最后⼀⾏代码能够输出数字 0-9（最好能给多种答案）（<a href=\"https://github.com/lgwebdream/FE-Interview/issues/328\">答案&amp;解析</a>）</h3>\n<pre><code class=\"language-js\">var arrys = [];\nfor (var i = 0; i < 10; i++) {\n  arrys.push(function () {\n    return i;\n  });\n}\narrys.forEach(function (fn) {\n  console.log(fn());\n}); //本⾏不能修改\n</code></pre>\n<h3>实现函数接受任意二叉树，求二叉树所有根到叶子路径组成的数字之和</h3>\n<pre><code class=\"language-js\">class TreeNode{\n  value:number\n  left?:TreeNode\n  right?:TreeNode\n}\nfunction getPathSum(root){\n  // your code\n}\n// 例子，一层二叉树如下定义，路径包括1 —> 2 ,1 -> 3\nconst node = new TreeNode();\nnode.value = 1;\nnode.left = new TreeNode();\nnode.left.value = 2;\nnode.right = new TreeNode();\nnode.right.value = 3;\ngetPathSum(node); // return 7 = (1+2) + (1+3)\n</code></pre>\n<h3>按要求实现代码</h3>\n<pre><code class=\"language-js\">// 给两个数组 [A1,A2,B1,B2,C1,C2,D1,D2] [A,B,C,D]\n// 输出 [A1,A2,A,B1,B2,B,C1,C2,C,D1,D2,D]\n</code></pre>\n<h3>请写一个函数，输出出多级嵌套结构的 Object 的所有 key 值</h3>\n<pre><code class=\"language-js\">var obj = {\n  a: &quot;12&quot;,\n  b: &quot;23&quot;,\n  first: {\n    c: &quot;34&quot;,\n    d: &quot;45&quot;,\n    second: { 3: &quot;56&quot;, f: &quot;67&quot;, three: { g: &quot;78&quot;, h: &quot;89&quot;, i: &quot;90&quot; } },\n  },\n};\n// => [a,b,c,d,e,f,g,h,i]\n</code></pre>\n<h3>动手实现一个 repeat 方法</h3>\n<pre><code class=\"language-js\">function repeat(func, times, wait) {\n  // TODO\n}\nconst repeatFunc = repeat(alert, 4, 3000);\n// 调用这个 repeatFunc (&quot;hellworld&quot;)，会alert4次 helloworld, 每次间隔3秒\n</code></pre>\n<h3>versions 是一个项目的版本号列表，因多人维护，不规则，动手实现一个版本号处理函数</h3>\n<pre><code class=\"language-js\">var versions = [&quot;1.45.0&quot;, &quot;1.5&quot;, &quot;6&quot;, &quot;3.3.3.3.3.3.3&quot;];\n// 要求从小到大排序，注意'1.45'比'1.5'大\nfunction sortVersion(versions) {\n  // TODO\n}\n// => ['1.5','1.45.0','3.3.3.3.3.3','6']\n</code></pre>\n<h3>实现以下代码</h3>\n<pre><code class=\"language-js\">function add() {\n  // your code\n}\nfunction one() {\n  // your code\n}\nfunction two() {\n  // your code\n}\nconsole.log(add(one(two()))); //3\nconsole.log(add(two(one()))); //3\n</code></pre>\n<h3>实现一个 setter 方法</h3>\n<pre><code class=\"language-js\">let setter = function (conten, key, value) {\n  // your code\n};\nlet n = {\n  a: {\n    b: {\n      c: { d: 1 },\n      bx: { y: 1 },\n    },\n    ax: { y: 1 },\n  },\n};\n// 修改值\nsetter(n, &quot;a.b.c.d&quot;, 3);\nconsole.log(n.a.b.c.d); //3\nsetter(n, &quot;a.b.bx&quot;, 1);\nconsole.log(n.b.bx); //1\n</code></pre>\n<h3>实现一个功能，发送请求 5s 时间后，如果没有数据返回，中断请求,提示错误</h3>\n<p>分类：JavaScript、编程题</p>\n<p><a href=\"https://github.com/lgwebdream/FE-Interview/issues/375\">答案&amp;解析</a></p>\n<p><br/></p>\n<h3>按照调用实例，实现下面的 Person 方法</h3>\n<pre><code class=\"language-js\">Person(&quot;Li&quot;);\n// 输出： Hi! This is Li!\n\nPerson(&quot;Dan&quot;).sleep(10).eat(&quot;dinner&quot;);\n// 输出：\n// Hi! This is Dan!\n// 等待10秒..\n// Wake up after 10\n// Eat dinner~\n\nPerson(&quot;Jerry&quot;).eat(&quot;dinner&quot;).eat(&quot;supper&quot;);\n// 输出：\n// Hi This is Jerry!\n// Eat dinner~\n// Eat supper~\n\nPerson(&quot;Smith&quot;).sleepFirst(5).eat(&quot;supper&quot;);\n// 输出：\n// 等待5秒\n// Wake up after 5\n// Hi This is Smith!\n// Eat supper\n</code></pre>\n<h3>按要求完成代码</h3>\n<pre><code class=\"language-js\">const timeout = (ms) =>\n  new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve();\n    }, ms);\n  });\nconst ajax1 = () =>\n  timeout(2000).then(() => {\n    console.log(&quot;1&quot;);\n    return 1;\n  });\nconst ajax2 = () =>\n  timeout(1000).then(() => {\n    console.log(&quot;2&quot;);\n    return 2;\n  });\nconst ajax3 = () =>\n  timeout(2000).then(() => {\n    console.log(&quot;3&quot;);\n    return 3;\n  });\nconst mergePromise = (ajaxArray) => {\n  // 1,2,3 done [1,2,3] 此处写代码 请写出ES6、ES3 2中解法\n};\nmergePromise([ajax1, ajax2, ajax3]).then((data) => {\n  console.log(&quot;done&quot;);\n  console.log(data); // data 为[1,2,3]\n});\n// 执行结果为：1 2 3 done [1,2,3]\n</code></pre>\n<h3>请修改代码能跳出死循环</h3>\n<pre><code class=\"language-js\">while (1) {\n  switch (&quot;yideng&quot;) {\n    case &quot;yideng&quot;:\n    //禁止直接写一句break\n  }\n}\n</code></pre>\n<h3>修改代码不造成死循环</h3>\n<pre><code class=\"language-js\">while(1){\n  console.log(Math.random());\n}\n</code></pre>\n<h3>实现一个打点计时器</h3>\n<pre><code class=\"language-js\">/* \n  1.从start至end,每隔100毫秒console.log一个数字，每次数字增幅为1\n  2.返回的对象中需要包含一个cancel方法，用于停止定时操作\n  3.第一个数字需要立即输出\n*/\n</code></pre>\n<h3>按要求完成题目</h3>\n<pre><code class=\"language-js\">/* \n  a)在不使用vue、react的前提下写代码解决一下问题\n    一个List页面上，含有1000个条目的待办列表，现其中100项在同一时间达到了过期时间，需要在对应项的text-node里添加“已过期”文字。需要尽可能减少dom重绘次数以提升性能。\n  b)尝试使用vue或react解决上述问题\n*/\n</code></pre>\n<h3>填充代码实现 template 方法</h3>\n<pre><code class=\"language-js\">var str = &quot;您好，<%=name%>。欢迎来到<%=location%>&quot;;\nfunction template(str) {\n  // your code\n  return obj => str.replace(/<%=([a-zA-Z]+)%>/g, (_, $1) => obj[$1] || '')\n}\nvar compiled = template(srt);\n// compiled的输出值为：“您好，张三。欢迎来到网易游戏”\ncompiled({ name: &quot;张三&quot;, location: &quot;网易游戏&quot; });\n</code></pre>\n<h3>有这样一个函数 A,要求在不改变原有函数 A 功能以及调用方式的情况下，使得每次调用该函数都能在控制台打印出“HelloWorld”</h3>\n<pre><code class=\"language-js\">function A() {\n  console.log(&quot;调用了函数A&quot;);\n}\n\n\nvar pA = new Proxy(A, {\n  apply () {\n    console.log('HelloWorld')\n  }\n})\n\npA();\n</code></pre>\n<ul>\n<li>\n<p>请手写实现一个拖拽</p>\n</li>\n<li>\n<p>请实现一个 cacheRequest 方法，保证发出多次同一个 ajax 请求时都能拿到数据，而实际上只发出一次请求</p>\n</li>\n<li>\n<p>请实现鼠标点击页面中的任意标签，alert 该标签的名称(注意兼容性)</p>\n</li>\n<li>\n<p>使用 JavaScript 实现 cookie 的设置、读取、删除</p>\n</li>\n<li>\n<p>用 html、css、js 模拟实现一个下拉框，使得下拉框在各个浏览器下的样式和行为完全一致，说出你的设计方案，并且重点说明功能设计时要考虑的因素。</p>\n</li>\n<li>\n<p>在一个 ul 里有 10 个 li,实现点击对应的 li,输出对应的下标</p>\n</li>\n<li>\n<p>用原生 js 实现自定义事件</p>\n</li>\n<li>\n<p>手写 EventEmitter 实现</p>\n</li>\n<li>\n<p>请用 JavaScript 代码实现事件代理</p>\n</li>\n<li>\n<p>请实现$on,$emit</p>\n</li>\n<li>\n<p>编写一个 Person 类，并创建两个不同的 Person 对象</p>\n</li>\n</ul>\n"}}></div>
  }
  