
  import React,{useEffect} from 'react';
 
  import 'highlight.js/styles/xcode.css';
  const hljs = require('highlight.js');

  export default () => {
    useEffect(()=>{
      document.querySelectorAll('code').forEach(el => {
        el.style.backgroundColor='#f8f8f8';
        el.style.marginBottom='0.1rem';
        hljs.highlightElement(el);
      });
    },[])
    return <div style={{fontSize:'0.26rem'}} dangerouslySetInnerHTML={{__html:"<blockquote>\n<p>算法 + 数据结构 = 程序</p>\n</blockquote>\n<h3>理解数据结构</h3>\n<p>数据结构是计算机组织、存储数据元素的方式，它是具有一定逻辑关系和存储关系的结构的集合，这个集合中通常还包含这响应的操作方法。数据结构是相对固定的并且通常有特定应用的场景</p>\n<p>数据结构主要包含逻辑结构和存储结构，逻辑结构表示相邻两个数据元素之间的关联关系，包含线性结构和非线性结构，线性结构描述的是数据元素之间存在一对一的线性关系，所有的节点只有一个前驱节点和一个后继节点，例如数组、队列、栈、链表等。非线性结构描述的是数据元素之间具有多个对应关系，一个节点可能有多个直接前驱节点和多个后继节点，例如树、图、多维数组等。存储结构表示逻辑结构在计算机存储空间中的存放形式，常见的四种存储结构：顺序存储、链式存储、索引存储和哈希存储。顺序存储即在内存中用一组连续的存储单元存储各个数据单元；链式存储即内存中存储单元不一定连续，使用任意地址的存储单元存放元素，它们是通过指针指向相邻节点的地址信息来建立联系的；索引存储即除了建立存储节点以外还另外建立索引表来标识节点的地址；哈希存储即节点的关键码值决定节点的存储地址</p>\n<p>决定程序优劣的关键就是算法，因此这时候需要一种方法来度量算法好坏，即时间复杂度和空间复杂度</p>\n<h3>算法时间复杂度</h3>\n<p>时间复杂度是用来方便开发者估算出程序的运行时间。我们通常会估计算法的操作单元数量，来代表程序消耗的时间， 这里我们默认CPU的每个单元运行消耗的时间都是相同的，一般用n来表示规模大小。时间复杂度不是一成不变的，和输入数据有必然联系，所以时间复杂度指的是一般情况。我们在决定使用那些算法的时候 ，不是时间复杂越低的越好，要考虑数据规模，如果数据规模很小 甚至可以用O(n^2)的算法比 O(n)的更合适。我们在计算时间复杂度的时候，通常要忽略常数项系数，因为大O其实就是数据量级突破一个点且数据量级非常大的情况下所表现出的时间复杂度，这个点也就是 常数项系数已经不起决定性作用的点。一般来说我们都默认数据规模足够大，基于此，算法时间复杂度的排行如下</p>\n<p>O(1)常数阶 < O(logn)对数阶 < O(n)线性阶 < O(n^2)平方阶 < O(n^3)(立方阶) < O(2^n) (指数阶)</p>\n<h3>常用的算法思想</h3>\n<p>算法思想</p>\n"}}></div>
  }
  