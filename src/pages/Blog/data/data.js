export const data = [{"id":0,"tabTitle":"Js基础","tabData":[{"id":"0001","dir":"Js基础","name":"this","title":"this","desc":"this关键词TC39执行上下文对象指向函数执行时所在的上下文对象，箭头函数（表达式）除外，它直接指向函数定义时所在的上下文对象。普通对象（无论多少层级）、普通函数调用，this指向全局const o","url":"/article?id=0001"},{"id":"0002","dir":"Js基础","name":"事件循环","title":"事件循环","desc":"关键词Promise A+（https://promisesaplus.com/）事件循环异步任务执行规则，先对异步任务进行分类，然后按照优先级执行。宏任务在下一次事件循环开始执行，微任务在本次事件循","url":"/article?id=0002"},{"id":"0003","dir":"Js基础","name":"作用域","title":"作用域","desc":"作用域关键词var、let/const、变量提升、暂时性死区词法作用域、执行上下文闭包函数、方法、IIFE、模块作用域是变量/常量的访问规则，或者说是变量/常量的影响范围，通过指定作用域的类型来分配变","url":"/article?id=0003"},{"id":"0004","dir":"Js基础","name":"原型链","title":"原型链","desc":"原型链原型和原型链prototype：引用TC39上的原话object that provides shared properties for other objectsWhen a construc","url":"/article?id=0004"}]},{"id":1,"tabTitle":"Js算法","tabData":[{"id":"0005","dir":"Js算法","name":"常见手写算法","title":"常见手写算法","desc":"常见手写算法关键词promise数组实现汇总BOM判断设备来源的方法（isIos、isAndroid、isIphoneX）const DeviceInfo = (() => {  const ua =","url":"/article?id=0005"}]},{"id":2,"tabTitle":"React","tabData":[{"id":"0006","dir":"React","name":"Hooks","title":"Hooks","desc":"Hooks历史mvc软件架构模式BackboneBackbone.js 的最佳应用场景有哪些？React作用（解决了什么问题/产生什么影响/核心的几个版本）react提出了全新的组织代码的方式，使其更","url":"/article?id=0006"}]},{"id":3,"tabTitle":"React组件封装","tabData":[{"id":"0007","dir":"React组件封装","name":"如何写一个按钮组件","title":"如何写一个按钮组件","desc":"按钮组件按钮的业务属性是可交互，点击可以给到某种反馈。首先是要吸引你可以点击它，然后点击它之后能有一些反应（变化）。因此我们可以定义按钮组件的功能可以吸引点击：能够自动执行动画，包括但不仅限于呼吸、抖","url":"/article?id=0007"}]},{"id":4,"tabTitle":"Webpack","tabData":[{"id":"0008","dir":"Webpack","name":"devserver工作原理","title":"devserver工作原理","desc":"webpack-dev-server","url":"/article?id=0008"},{"id":"0009","dir":"Webpack","name":"webpack工作原理","title":"webpack工作原理","desc":"webpack工作原理webpack是一个js模块打包工具，通过js模块之间导入导出的依赖关系，构建依赖网络、静态分析来打包合并。其基本原理：1. 获取参数，根据参数初始化编译器（compiler）2","url":"/article?id=0009"},{"id":"0010","dir":"Webpack","name":"常用的plugin和loader","title":"常用的plugin和loader","desc":"常用的loader和plugin常用的loaderstyle-loader、css-loader、less-loaderbabel-loader、ts-loaderurl-loader常用的plugi","url":"/article?id=0010"}]},{"id":5,"tabTitle":"性能优化","tabData":[{"id":"0011","dir":"性能优化","name":"渲染优化","title":"渲染优化","desc":"渲染优化html解析渲染过程1. 解析HTML得到DOM树，解析CSS得到CSSOM树2. 将DOM树和CSSOM树结合得到渲染树（Render Tree）3. 布局（Layout）：根据生成的渲染树","url":"/article?id=0011"},{"id":"0012","dir":"性能优化","name":"网络优化","title":"网络优化","desc":"网络优化缩短请求时间减少DNS查询CND加速开启HTTP缓存DNS预解析/资源预加载减少请求数量请求合并按需加载重复请求处理合理缓存接口数据减少请求体积请求资源压缩HTTP压缩图片格式转换（webP等","url":"/article?id=0012"}]},{"id":6,"tabTitle":"网络","tabData":[{"id":"0013","dir":"网络","name":"DNS和CDN","title":"DNS和CDN","desc":"浏览器中输入URL到返回页面的全过程1. 根据域名，进行DNS域名解析2. 拿到解析的IP地址，建立TCP连接3. 向IP地址发送HTTP请求4. 服务器处理请求5. 返回响应结果6. 关闭TCP连接","url":"/article?id=0013"},{"id":"0014","dir":"网络","name":"HTTP网络的发展","title":"HTTP网络的发展","desc":"HTTP关键词http rfc 规范HTTP起源Tim Berners-Lee博士在1989年发表一篇论文，提出了万维网项目，是一个通过网络传输超文本的系统。为了实现这个系统，需要确定传输的格式（HT","url":"/article?id=0014"},{"id":"0015","dir":"网络","name":"网络模型","title":"网络模型","desc":"网络模型关键词OSI七层模型网络层、传输层TCP、UDP网络模型、ISO/OSI七层模型、TCP/IP模型最开始的时候网络协议是由网络公司自定义的，微软、苹果、思科等都有自己的网络协议，但这各家的协议","url":"/article?id=0015"}]}]